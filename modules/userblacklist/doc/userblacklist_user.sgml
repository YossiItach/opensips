<chapter>
	<title>User's Guide</title>
	
	<section>
	<title>Overview</title>
	<para>
	The userblacklist module allows OpenSER to handle blacklists
	on a per user basis. This information is stored in a database
	table, which is queried to decide if the number is blacklisted
	or not.
	</para>
	<para>
	An additional functionality that this module provides is the ability
	to handle global blacklists. This lists are loaded on startup into
	memory, thus providing a better performance then in the userblacklist
	case. This global lists could also used to prevent the blacklisting
	of important numbers, as whitelisting is also supported. This is useful
	for example to prevent the customer from blocking emergency call number
	or service hotlines.
	</para>
	<para>
	The module exports two functions, <emphasis>check_blacklist</emphasis>
	and <emphasis>check_user_blacklist</emphasis> for usage in the config
	file. Furthermore its provide a FIFO function to reload the global
	blacklist cache.
	</para>
	</section>

	<section>
		<title>Dependencies</title>
		<section>
			<title>&ser; Modules</title>
			<para>
			The module depends on the following modules (in the other words 
			the listed modules must be loaded before this module):
			<itemizedlist>
			<listitem>
				<para><emphasis>database</emphasis> -- Any database module</para>
			</listitem>
			</itemizedlist>
		</para>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
			The following libraries or applications must be installed 
			before running &ser; with this module loaded:
			<itemizedlist>
				<listitem>
				<para><emphasis>none</emphasis></para>
				</listitem>
			</itemizedlist>
		</section>
	</section>


	<section>
	<title>Exported Parameters</title>
    <section>
	    <title><varname>db_url</varname> (string)</title>
	    <para>
		Url to the database containing the routing data.
	    </para>
	    <para>
		<emphasis>
		Default value is <quote>&defaultrodb;</quote>.
		</emphasis>
	    </para>
	    <example>
		<title>Set <varname>db_url</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("userblacklist", "db_url", "&exampledb;")
...
		</programlisting>
	    </example>
    </section>

    <section>
	    <title><varname>db_table</varname> (string)</title>
	    <para>
		Name of the table where the user blacklist data is stored.
	    </para>
	    <para>
		    <emphasis>
			    Default value is <quote>userblacklist</quote>.
		    </emphasis>
	    </para>
	    <example>
		    <title>Set <varname>db_table</varname> parameter</title>
		    <programlisting format="linespecific">
...
modparam("userblacklist", "db_table", "userblacklist")
...
		    </programlisting>
	    </example>
    </section>
	
    <section>
	    <title><varname>use_domain</varname> (integer)</title>
	    <para>
			If set to non-zero value, the domain column in the userblacklist is used.
	    </para>
	    <para>
		    <emphasis>
			    Default value is <quote>0</quote>.
		    </emphasis>
	    </para>
	    <example>
		    <title>Set <varname>use_domain</varname> parameter</title>
		    <programlisting format="linespecific">
...
modparam("userblacklist", "use_domain", 0)
...
		    </programlisting>
	    </example>
    </section>
</section>
<section>
	<title>Exported Functions</title>
	<section>
	    <title>
		<function moreinfo="none">check_user_blacklist (string user, string domain)</function>
	    </title>
	    <para>
		Finds the longest prefix that matches the request URI for the given user
		and domain name in the database. If a match is found and it is not set
		to whitelist, false is returned. Otherwise, true is returned.
		Pseudo-variables or AVPs can be used for both parameters.
	    </para>
	<example>
		<title><function>check_user_blacklist</function> usage</title>
		<programlisting format="linespecific">
...
$avp(i:80) = $rU;
# rewrite the R-URI
if (!check_user_blacklist("$avp(i:80)", "$avp(i:82)"))
	sl_send_reply("403", "Forbidden");
	exit;
}
...
		</programlisting>
	    </example>
	</section>
	<section>
	    <title>
		<function moreinfo="none">check_blacklist (string table)</function>
	    </title>
	    <para>
		Finds the longest prefix that matches the request URI for the
		given table. If a match is found and it is not set to whitelist,
		false is returned. Otherwise, true is returned.
	    </para>
	<example>
		<title><function>check_blacklist</function> usage</title>
		<programlisting format="linespecific">
...
if (!check_blacklist("global_blacklist")))
	sl_send_reply("403", "Forbidden");
	exit;
}
...
		</programlisting>
	    </example>
	</section>
</section>

<section>
	    <title><acronym>MI</acronym> Commands</title>
		<section>
	    <title>
		<function moreinfo="none">reload_blacklist</function>
	    </title>
	    <para>
		Reload the internal global blacklist cache. This is necessary after
		the database tables for the global blacklist have been changed.
	    </para>
	<example>
		<title><function>reload_blacklists</function> usage</title>
		<programlisting format="linespecific">
...
openserctl fifo reload_blacklist
...
		</programlisting>
	    </example>
	</section>
</section>