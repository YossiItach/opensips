
Presence_XML Module

Anca-Maria Vamanu

   voice-system.ro

Edited by

Anca-Maria Vamanu

   Copyright © 2007 voice-system.ro
     _________________________________________________________

   Table of Contents
   1. User's Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSER Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Functions

   2. Developer's Guide

        2.1. bind_xcap_api(xcap_api_t* api)
        2.2. get_elem
        2.3. register_xcb

   3. Frequently Asked Questions

   List of Examples
   2-1. xcap_api structure
     _________________________________________________________

Chapter 1. User's Guide

1.1. Overview

   The modules is an XCAP client for OpenSER that can be used by
   other modules. It fetches XCAP elements, either documents or
   part of them, by sending HTTP GET requests. It uses libcurl
   library as a HTTP client.

   The XCAP servers the module works with have to be able to send
   a MI command, 'refreshXcapDoc [doc_url]' when a document is
   updated.

   The module is currently used by the presence_xml module, if
   the 'integrated_xcap_server' parameter is not set.
     _________________________________________________________

1.2. Dependencies

1.2.1. OpenSER Modules

   The modules is not dependent of any OpenSER module.
     _________________________________________________________

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSER with this module loaded:

     * libxml.
     * libcurl.
     _________________________________________________________

1.3. Exported Functions

   None to be used in configuration file.
     _________________________________________________________

Chapter 2. Developer's Guide

   The module exports a number of functions that allow selecting
   and retrieving an element from an xcap server and also
   registering a callback to be called when a MI command
   refreshXcapDoc is received and the document in question is
   retrieved.
     _________________________________________________________

2.1. bind_xcap_api(xcap_api_t* api)

   This function allows binding the needed functions.

   Example 2-1. xcap_api structure
...
typedef struct xcap_api {

        /* xcap node selection and retrieving functions*/
        xcap_get_elem_t get_elem;
        xcap_nodeSel_init_t int_node_sel;
        xcap_nodeSel_add_step_t add_step;
        xcap_nodeSel_add_terminal_t add_terminal;
        xcap_nodeSel_free_t free_node_sel;

        /* function to register a callback to document changes*/
        register_xcapcb_t register_xcb;
}xcap_api_t;
...
     _________________________________________________________

2.2. get_elem

   Field type:
...
typedef char* (*xcap_get_elem_t)(char* xcap_root,
xcap_doc_sel_t* doc_sel, xcap_node_sel_t* node_sel);
...

   This function sends a HTTP request and gets the specified
   information from the xcap server.

   The parameters signification:

     * xcap_root- the XCAP server address;
     * doc_sel- structure with document selection info;
Parameter type:
...
typedef struct xcap_doc_sel
{
        str auid; /* application defined Unique ID*/
        int type; /* the type of the path segment
                                after the AUID  which must either
                                be GLOBAL_TYPE (for "global") or
                                USERS_TYPE (for "users") */
        str xid; /* the XCAP User Identifier
                                if type is USERS_TYPE */
        str filename;
}xcap_doc_sel_t;
...
     * node_sel- structure with node selection info;
Parameter type:
...
typedef struct xcap_node_sel
{
        step_t* steps;
        step_t* last_step;
        int size;
        ns_list_t* ns_list;
        ns_list_t* last_ns;
        int ns_no;

}xcap_node_sel_t;

typedef struct step
{
        str val;
        struct step* next;
}step_t;

typedef struct ns_list
{
        int name;
        str value;
        struct ns_list* next;
}ns_list_t;
...
       The node selector is represented like a list of steps that
       will be represented in the path string separated by '/'
       signs. The namespaces for the nodes are stored also in a
       list, as an association of name and value, where the value
       is to be included in the respective string val field of
       the step.
       To construct the node structure the following functions in
       the xcap_api structure should be used: 'int_node_sel',
       'add_step' and if needed, 'add_terminal'.
       If the intention is to retrieve the whole document this
       argument must be NULL.
     _________________________________________________________

2.3. register_xcb

   Field type:
...
typedef int (*register_xcapcb_t)(int types, xcap_cb f);
...

   - 'types' parameter can have a combined value of PRES_RULES,
   RESOURCE_LIST, RLS_SERVICES and PIDF_MANIPULATION.

   -the callback function has type :
...
typedef int (xcap_cb)(int doc_type, str xid, char* doc);
...
     _________________________________________________________

Chapter 3. Frequently Asked Questions

   3.1. Where can I find more about OpenSER?
   3.2. Where can I post a question about this module?
   3.3. How can I report a bug?

   3.1. Where can I find more about OpenSER?

   Take a look at http://openser.org/.

   3.2. Where can I post a question about this module?

   First at all check if your question was already answered on
   one of our mailing lists:

     * User Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/users
     * Developer Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/devel

   E-mails regarding any stable OpenSER release should be sent to
   <users@openser.org> and e-mails regarding development versions
   should be sent to <devel@openser.org>.

   If you want to keep the mail private, send it to
   <team@openser.org>.

   3.3. How can I report a bug?

   Please follow the guidelines provided at:
   http://sourceforge.net/tracker/?group_id=139143.
