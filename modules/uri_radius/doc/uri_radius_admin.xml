<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>
	
	<section>
	<title>Overview</title>
	<para>
	This module implements some URI related Radius based tests.
	</para>
	</section>

	<section>
	<title>Dependencies</title>
		<section>
			<title>&osips; Modules</title>
			<para>
			The module depends on the following modules (in the other words 
			the listed modules must be loaded before this module):
			<itemizedlist>
				<listitem>
				<para><emphasis>none</emphasis></para>
				</listitem>
			</itemizedlist>
			</para>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
			The following libraries or applications must be installed 
			before compilling &osips; with this module loaded:
			</para>
			<itemizedlist>
				<listitem>
				<para><emphasis>radiusclient-ng</emphasis> 0.5.0 or higher -- 
				library and development files. See <ulink 
				url='http://developer.berlios.de/projects/radiusclient-ng/'>
				http://developer.berlios.de/projects/radiusclient-ng/</ulink>.
				</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section>
	<title>Exported Parameters</title>
	<section>
		<title><varname>radius_config</varname> (string)</title>
		<para>
		Radiusclient configuration file.
		</para>
		<para>
		<emphasis>
			Default value is <quote>/usr/local/etc/radiusclient-ng/radiusclient.conf</quote>.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>param_name</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uri_radius", "radius_config", "/etc/radiusclient.conf")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>service_type</varname> (integer)</title>
		<para>
		Radius service type used in
	<function>radius_does_uri_exist</function> and <function>radius_does_uri_user_exist</function> checks.
		</para>
		<para>
		<emphasis>
			Default value is 10 (Call-Check).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>service_type</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uri_radius", "service_type", 11)
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>use_sip_uri_host</varname> (integer)</title>
		<para>
		If zero, <function>radius_does_uri_exist</function>
	sends to RADIUS server Request URI user@host in UserName
	attribute.  If non-zero, <function>radius_does_uri_exist</function>
	sends to RADIUS server Request URI user in UserName attribute
	and host in SIP-URI-Host attribute.
		</para>
		<para>
		<emphasis>
			Default value is 0.
		</emphasis>
		</para>
		<example>
		<title>Set <varname>use_sip_uri_host</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("uri_radius", "use_sip_uri_host", 1)
...
</programlisting>
		</example>
	</section>
	</section>
	<section>
	<title>Exported Functions</title>
	<section>
		<title>
		<function moreinfo="none">radius_does_uri_exist([pvar])</function>
		</title>
		<para>
		Checks from Radius if user@host in Request-&uri; or in
		URI stored in pseudo variable argument belongs
		to a local user. Can be used to decide if 404 or 480 should
		be returned after lookup has failed.   If yes, loads AVP
		based on SIP-AVP reply items returned from Radius.  Each
		SIP-AVP reply item must have a string value of form:
		</para>
		<para>
		<itemizedlist>
			<listitem><para><emphasis>
			value = SIP_AVP_NAME SIP_AVP_VALUE
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_NAME = STRING_NAME | '#'ID_NUMBER
			</emphasis></para></listitem>
			<listitem><para><emphasis>
			SIP_AVP_VALUE = ':'STRING_VALUE | '#'NUMBER_VALUE
			</emphasis></para></listitem>
		</itemizedlist>
		</para>
		<para>
		Returns 1 if Radius returns Access-Accept, -1 if Radius
		returns Access-Reject, and -2 in case of internal
		error.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>radius_does_uri_exist</function> usage</title>
		<programlisting format="linespecific">
...
if (radius_does_uri_exist()) {
	...
};
...
</programlisting>
		</example>
	</section>
	<section>
		<title>
		<function moreinfo="none">radius_does_uri_user_exist([pvar])</function>
		</title>
		<para>
		Similar to radius_does_uri_exist, but check is done
		based only on Request-URI user part or user stored in
		pseudo variable argument.  User should thus
		be unique among all users, such as an E.164 number.
		</para>
		<para>
		This function can be used from REQUEST_ROUTE.
		</para>
		<example>
		<title><function>radius_does_uri_user_exist</function> usage</title>
		<programlisting format="linespecific">
...
if (radius_does_uri_user_exist()) {
	...
};
...
</programlisting>
		</example>
	</section>
	</section>
</chapter>

