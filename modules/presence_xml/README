
Presence_XML Module

Anca-Maria Vamanu

   voice-system.ro

Edited by

Anca-Maria Vamanu

   Copyright © 2007 voice-system.ro
     _________________________________________________________

   Table of Contents
   1. User's Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSER Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. db_url(str)
              1.3.2. xcap_table(str)
              1.3.3. force_active (int)

        1.4. Exported Functions
        1.5. Installation

   2. Developer's Guide

        2.1. bind_libxml_api(libxml_api_t* api)

   3. Frequently Asked Questions

   List of Examples
   1-1. Set db_url parameter
   1-2. Set xcap_table parameter
   1-3. Set force_active parameter
   1-4. PRESECE_XML tables
   2-1. libxml_api structure
     _________________________________________________________

Chapter 1. User's Guide

1.1. Overview

   The module does specific handling for notify-subscribe events
   using xml bodies. It is used with the general event handling
   module, presence. It constructs and add 3 events to it:
   presence, presence.winfo, dialog;sla.

   This module uses xcap_table with permission rules to deal with
   authorization rules for presence.
     _________________________________________________________

1.2. Dependencies

1.2.1. OpenSER Modules

   The following modules must be loaded before this module:

     * a database module.
     * presence.
     * sl.
     _________________________________________________________

1.2.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSER with this module loaded:

     * libxml.
     _________________________________________________________

1.3. Exported Parameters

1.3.1. db_url(str)

   The database url.

   Default value is "NULL". 

   Example 1-1. Set db_url parameter
...
modparam("presence_xml", "db_url",
        "mysql://openser:openserrw@192.168.2.132/openser")
...
     _________________________________________________________

1.3.2. xcap_table(str)

   The name of the db table where XCAP XMLs are stored.

   Default value is "xcap_xml". 

   Example 1-2. Set xcap_table parameter
...
modparam("presence_xml", "xcap_table", "xcaps")
...
     _________________________________________________________

1.3.3. force_active (int)

   This parameter is used for permissions when handling Subscribe
   messages. If set to 1, subscription state is considered active
   and the presentity is not queried for permissions. Otherwise,
   the xcap_table is queried and the state is extracted from
   there. If no record exists, the subscriptions remains in
   pending state and the watcher receives Notify messages with no
   body. ( If not using an xcap server, you should set this
   parameter to 1).

   Default value is "0". 

   Example 1-3. Set force_active parameter
...
modparam("presence_xml", "force_active", 1)
...
     _________________________________________________________

1.4. Exported Functions

   None to be used in configuration file.
     _________________________________________________________

1.5. Installation

   The module requires 1 table in OpenSER database. Next SQL
   statements shows the syntax to create it.

   Example 1-4. PRESECE_XML tables
...

use openser;

CREATE TABLE `xcap_xml` (
  `id` int(10) NOT NULL auto_increment,
  `username` varchar(66) NOT NULL,
  `domain` varchar(128) NOT NULL,
  `xcap` text NOT NULL,
  `doc_type` int(11) NOT NULL,
  UNIQUE KEY udd_xcap (`username`,`domain`,`doc_type`),
  PRIMARY KEY (id)
) ENGINE=MyISAM;

...
     _________________________________________________________

Chapter 2. Developer's Guide

   The module provides an imporved xml library on top of libxml
   that can be used in other OpenSER modules.
     _________________________________________________________

2.1. bind_libxml_api(libxml_api_t* api)

   This function binds the presece_xml modules and fills the
   structure with the 4 exported function.

   Example 2-1. libxml_api structure
...
typedef struct libxml_api {
        xmlDocGetNodeByName_t xmlDocGetNodeByName;
        xmlNodeGetChildByName_t xmlNodeGetChildByName;
        xmlNodeGetNodeContentByName_t xmlNodeGetNodeContentByName;
        xmlNodeGetAttrContentByName_t xmlNodeGetAttrContentByName;
} libxml_api_t;
...
     _________________________________________________________

Chapter 3. Frequently Asked Questions

   3.1. Where can I find more about OpenSER?
   3.2. Where can I post a question about this module?
   3.3. How can I report a bug?

   3.1. Where can I find more about OpenSER?

   Take a look at http://openser.org/.

   3.2. Where can I post a question about this module?

   First at all check if your question was already answered on
   one of our mailing lists:

     * User Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/users
     * Developer Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/devel

   E-mails regarding any stable OpenSER release should be sent to
   <users@openser.org> and e-mails regarding development versions
   should be sent to <devel@openser.org>.

   If you want to keep the mail private, send it to
   <team@openser.org>.

   3.3. How can I report a bug?

   Please follow the guidelines provided at:
   http://sourceforge.net/tracker/?group_id=139143.
