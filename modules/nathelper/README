nathelper Module

Maxim Sobolev

   Sippy Software, Inc.

Edited by

Maxim Sobolev

Edited by

Bogdan-Andrei Iancu

   Copyright © 2003-2008 Sippy Software, Inc.

   Copyright © 2005 voice-system.ro
   Revision History
   Revision $Revision$ $Date: 2009-07-21 10:45:05 +0300
                              (Tue, 21 Jul 2009) $
     __________________________________________________________

   Table of Contents

   1. Admin Guide

        1.1. Overview
        1.2. NAT pinging types
        1.3. Multiple RTPProxy usage
        1.4. RTPProxy timeout notifications
        1.5. Dependencies

              1.5.1. OpenSIPS Modules
              1.5.2. External Libraries or Applications

        1.6. Exported Parameters

              1.6.1. natping_interval (integer)
              1.6.2. ping_nated_only (integer)
              1.6.3. natping_processes (integer)
              1.6.4. natping_socket (string)
              1.6.5. received_avp (str)
              1.6.6. rtpproxy_sock (string)
              1.6.7. rtpproxy_disable_tout (integer)
              1.6.8. rtpproxy_timeout (string)
              1.6.9. rtpproxy_autobridge (integer)
              1.6.10. rtpproxy_tout (integer)
              1.6.11. rtpproxy_retr (integer)
              1.6.12. force_socket (string)
              1.6.13. sipping_bflag (integer)
              1.6.14. sipping_from (string)
              1.6.15. sipping_method (string)
              1.6.16. nortpproxy_str (string)
              1.6.17. db_url (string)
              1.6.18. db_table (string)
              1.6.19. rtpp_socket_col (string)
              1.6.20. set_id_col (string)
              1.6.21. rtpp_notify_socket (string)

        1.7. Exported Functions

              1.7.1. fix_nated_contact([uri_params])
              1.7.2. fix_nated_sdp(flags [, ip_address])
              1.7.3. set_rtp_proxy_set()
              1.7.4. rtpproxy_offer([flags [, ip_address]])
              1.7.5. rtpproxy_answer([flags [, ip_address]])
              1.7.6. unforce_rtp_proxy()
              1.7.7. rtpproxy_stream2uac(prompt_name, count),
                      rtpproxy_stream2uas(prompt_name, count)

              1.7.8. rtpproxy_stop_stream2uac(),
                      rtpproxy_stop_stream2uas()

              1.7.9. add_rcv_param([flag]),
              1.7.10. fix_nated_register()
              1.7.11. nat_uac_test(flags)
              1.7.12. start_recording()

        1.8. MI Commands

              1.8.1. nh_enable_ping
              1.8.2. nh_enable_rtpp
              1.8.3. nh_show_rtpp
              1.8.4. nh_reload_rtpp

   2. Frequently Asked Questions

   List of Examples

   1.1. Set natping_interval parameter
   1.2. Set ping_nated_only parameter
   1.3. Set natping_processes parameter
   1.4. Set natping_socket parameter
   1.5. Set received_avp parameter
   1.6. Set rtpproxy_sock parameter
   1.7. Set rtpproxy_disable_tout parameter
   1.8. Set rtpproxy_timeout parameter to 200ms
   1.9. Enable auto-bridging feature
   1.10. Set rtpproxy_retr parameter
   1.11. Set force_socket parameter
   1.12. Set sipping_bflag parameter
   1.13. Set sipping_from parameter
   1.14. Set sipping_method parameter
   1.15. Set nortpproxy_str parameter
   1.16. Set db_url parameter
   1.17. Set db_table parameter
   1.18. Set rtpp_socket_col parameter
   1.19. Set set_id parameter
   1.20. Set rtpp_notify_socket parameter
   1.21. fix_nated_contact usage
   1.22. fix_nated_sdp usage
   1.23. fix_nated_contact usage
   1.24. rtpproxy_offer usage
   1.25. rtpproxy_answer usage
   1.26. unforce_rtp_proxy usage
   1.27. rtpproxy_stream2xxx usage
   1.28. add_rcv_paramer usage
   1.29. fix_nated_register usage
   1.30. start_recording usage
   1.31. nh_enable_ping usage
   1.32. nh_enable_rtpp usage
   1.33. nh_show_rtpp usage
   1.34. nh_reload_rtpp usage

Chapter 1. Admin Guide

1.1. Overview

   This is a module to help with NAT traversal. In particular, it
   helps symmetric UAs that don't advertise they are symmetric and
   are not able to determine their public address.
   fix_nated_contact rewrites Contact header field with request's
   source address:port pair. fix_nated_sdp adds the active
   direction indication to SDP (flag 0x01) and updates source IP
   address too (flag 0x02).

   Works with multipart messages that contain an SDP part, but not
   with multi-layered multipart messages.

1.2. NAT pinging types

   Currently, the nathelper module supports two types of NAT
   pings:
     * UDP package - 4 bytes (zero filled) UDP packages are sent
       to the contact address.
          + Advantages: low bandwitdh traffic, easy to generate by
            OpenSIPS;
          + Disadvantages: unidirectional traffic through NAT
            (inbound - from outside to inside); As many NATs do
            update the bind timeout only on outbound traffic, the
            bind may expire and closed.
     * SIP request - a stateless SIP request is sent to the
       contact address.
          + Advantages: bidirectional traffic through NAT, since
            each PING request from OpenSIPS (inbound traffic) will
            force the SIP client to generate a SIP reply (outbound
            traffic) - the NAT bind will be surely kept open.
          + Disadvantages: higher bandwitdh traffic, more
            expensive (as time) to generate by OpenSIPS;

1.3. Multiple RTPProxy usage

   Currently, the nathelper module can support multiple rtpproxies
   for balancing/distribution and control/selection purposes.

   The module allows the definition of several sets of rtpproxies
   - load-balancing will be performed over a set and the user has
   the ability to choose what set should be used. The set is
   selected via its id - the id being defined along with the set.
   Refer to the "rtpproxy_sock" module parameter definition for
   syntax description.

   The balancing inside a set is done automatically by the module
   based on the weight of each rtpproxy from the set.

   The selection of the set is done from script prior using
   unforce_rtp_proxy(), rtpproxy_offer() or rtpproxy_answer()
   functions - see the set_rtp_proxy_set() function.

   For backward compatibility reasons, a set with no id take by
   default the id 0. Also if no set is explicitly set before
   unforce_rtp_proxy(), rtpproxy_offer() or rtpproxy_answer() the
   0 id set will be used.

   IMPORTANT: if you use nultiple sets, take care and use the same
   set for both rtpproxy_offer()/rtpproxy_answer() and
   unforce_rtpproxy()!!

1.4. RTPProxy timeout notifications

   Nathelper module can also receive timeout notifications from
   multiple rtpproxies. RTPProxy can be configured to send
   notifications when a session doesn't receive any media for a
   configurable interval of time. The nathelper modules has
   implemented a listener for such notifications and when received
   it terminates the dialog at SIP level (send BYE to both ends),
   with the help of dialog module.

   In our tests with RTPProxy we observed some limitations and
   also provide a patch for it against git commit
   "600c80493793bafd2d69427bc22fcb43faad98c5". It contains an
   addition and implements separate timeout parameters for the
   phases of session establishment and ongoing sessions. In the
   official code a single timeout parameter controls both session
   establishment and rtp timeout and the timeout notification is
   also sent in the call establishment phase. This is a problem
   since we want to detect rtp timeout fast, but also allow a
   longer period for call establishment.

   To enable timeout notification there are several steps that you
   must follow:

   Start OpenSIPS timeout detection by setting the
   "rtpp_notify_socket" module parameter in your configuration
   script. This is the socket where further notification will be
   received from rtpproxies. This socket must be a TCP or UNIX
   socket. Also, for all the calls that require notification, the
   rtpproxy_offer() and rtpproxy_answer() functions must be called
   with the "n" flag.

   Configure RTPProxy to use timeout notification by adding the
   following command line parameters:
     * " -n timeout_socket" - specifies where the notifications
       will be sent. This socket must be the same as
       "rtpp_notify_socket" OpenSIPS module parameter. This
       parameter is mandatory.
     * " -T ttl" - limits the rtp session timeout to "ttl". This
       parameter is optional and the default value is 60 seconds.
     * " -W ttl" - limits the session establishment timeout to
       "ttl". This parameter is optional and the default value is
       60 seconds.

   All of the previous parameters can be used with the offical
   RTPProxy release, except for the last one. It has been added,
   together with other modifications to RTPProxy in order to work
   properly. The patch is located in the patches directory in the
   module.

   To get the patched version from git you must follow theese
   steps:
     * Get the latest source code: "git clone
       git://sippy.git.sourceforge.net/gitroot/sippy/rtpproxy"
     * Make a branch from the commit: "git checkout -b branch_name
       600c80493793bafd2d69427bc22fcb43faad98c5"
     * Patch RTPProxy: "patch < path_to_rtpproxy_patch"

   The patched version can also be found at:
   http://opensips.org/pub/rtpproxy/

1.5. Dependencies

1.5.1. OpenSIPS Modules

   The following modules must be loaded before this module:
     * usrloc module - only if the NATed contacts are to be
       pinged.
     * a database module - only if you want to load use a database
       table from where to load the rtp proxies sets.

1.5.2. External Libraries or Applications

   The following libraries or applications must be installed
   before running OpenSIPS with this module loaded:
     * None.

1.6. Exported Parameters

1.6.1. natping_interval (integer)

   Period of time in seconds between sending the NAT pings to all
   currently registered UAs to keep their NAT bindings alive.
   Value of 0 disables this functionality.

Note

   Enabling the NAT pinging functionality will force the module to
   bind itself to USRLOC module.

   Default value is 0.

   Example 1.1. Set natping_interval parameter
...
modparam("nathelper", "natping_interval", 10)
...

1.6.2. ping_nated_only (integer)

   If this variable is set then only contacts that have
   "behind_NAT" flag in user location database set will get ping.

   Default value is 0.

   Example 1.2. Set ping_nated_only parameter
...
modparam("nathelper", "ping_nated_only", 1)
...

1.6.3. natping_processes (integer)

   How many timer processes should be created by the module for
   the exclusive task of sending the NAT pings.

   Default value is 1.

   Example 1.3. Set natping_processes parameter
...
modparam("nathelper", "natping_processes", 3)
...

1.6.4. natping_socket (string)

   Spoof the natping's source-ip to this address. Works only for
   IPv4.

   Default value is NULL.

   Example 1.4. Set natping_socket parameter
...
modparam("nathelper", "natping_socket", "192.168.1.1:5006")
...

1.6.5. received_avp (str)

   The name of the Attribute-Value-Pair (AVP) used to store the
   URI containing the received IP, port, and protocol. The URI is
   created by fix_nated_register function of nathelper module and
   the attribute is then used by the registrar to store the
   received parameters. Do not forget to change the value of
   corresponding parameter in registrar module if you change the
   value of this parameter.

Note

   You must set this parameter if you use "fix_nated_register". In
   such case you must set the parameter with same name of
   "registrar" module to same value.

   Default value is "NULL" (disabled).

   Example 1.5. Set received_avp parameter
...
modparam("nathelper", "received_avp", "$avp(i:42)")
...

1.6.6. rtpproxy_sock (string)

   Definition of socket(s) used to connect to (a set) RTPProxy. It
   may specify a UNIX socket or an IPv4/IPv6 UDP socket.

   Default value is "NONE" (disabled).

   Example 1.6. Set rtpproxy_sock parameter
...
# single rtproxy
modparam("nathelper", "rtpproxy_sock", "udp:localhost:12221")
# multiple rtproxies for LB
modparam("nathelper", "rtpproxy_sock",
        "udp:localhost:12221 udp:localhost:12222")
# multiple sets of multiple rtproxies
modparam("nathelper", "rtpproxy_sock",
        "1 == udp:localhost:12221 udp:localhost:12222")
modparam("nathelper", "rtpproxy_sock",
        "2 == udp:localhost:12225")
...

1.6.7. rtpproxy_disable_tout (integer)

   Once RTPProxy was found unreachable and marked as disable,
   nathelper will not attempt to establish communication to
   RTPProxy for rtpproxy_disable_tout seconds.

   Default value is "60".

   Example 1.7. Set rtpproxy_disable_tout parameter
...
modparam("nathelper", "rtpproxy_disable_tout", 20)
...

1.6.8. rtpproxy_timeout (string)

   Timeout value in waiting for reply from RTPProxy.

   Default value is "1".

   Example 1.8. Set rtpproxy_timeout parameter to 200ms
...
modparam("nathelper", "rtpproxy_timeout", "0.2")
...

1.6.9. rtpproxy_autobridge (integer)

   Enable auto-bridging feature

   Default value is "0".

   Example 1.9. Enable auto-bridging feature
...
modparam("nathelper", "rtpproxy_autobridge", 1)
...

1.6.10. rtpproxy_tout (integer)

   Obsolete. see rtpproxy_timeout.

1.6.11. rtpproxy_retr (integer)

   How many times nathelper should retry to send and receive after
   timeout was generated.

   Default value is "5".

   Example 1.10. Set rtpproxy_retr parameter
...
modparam("nathelper", "rtpproxy_retr", 2)
...

1.6.12. force_socket (string)

   Socket to be forced in communicating to RTPProxy. It makes
   sense only for UDP communication. If no one specified, the OS
   will choose.

   Default value is "NULL".

   Example 1.11. Set force_socket parameter
...
modparam("nathelper", "force_socket", "localhost:33333")
...

1.6.13. sipping_bflag (integer)

   What branch flag should be used by the module to identify NATed
   contacts for which it should perform NAT ping via a SIP request
   instead if dummy UDP package.

   Default value is -1 (disabled).

   Example 1.12. Set sipping_bflag parameter
...
modparam("nathelper", "sipping_bflag", 7)
...

1.6.14. sipping_from (string)

   The parameter sets the SIP URI to be used in generating the SIP
   requests for NAT ping purposes. To enable the SIP request
   pinging feature, you have to set this parameter. The SIP
   request pinging will be used only for requests marked so.

   Default value is "NULL".

   Example 1.13. Set sipping_from parameter
...
modparam("nathelper", "sipping_from", "sip:pinger@siphub.net")
...

1.6.15. sipping_method (string)

   The parameter sets the SIP method to be used in generating the
   SIP requests for NAT ping purposes.

   Default value is "OPTIONS".

   Example 1.14. Set sipping_method parameter
...
modparam("nathelper", "sipping_method", "INFO")
...

1.6.16. nortpproxy_str (string)

   The parameter sets the SDP attribute used by nathelper to mark
   the packet SDP informations have already been mangled.

   If empty string, no marker will be added or checked.

Note

   The string must be a complete SDP line, including the EOH
   (\r\n).

   Default value is "a=nortpproxy:yes\r\n".

   Example 1.15. Set nortpproxy_str parameter
...
modparam("nathelper", "nortpproxy_str", "a=sdpmangled:yes\r\n")
...

1.6.17. db_url (string)

   The database url. This parameter should be set if you want to
   use a database table from where to load or reload definitions
   of socket(s) used to connect to (a set) RTPProxy. The record
   from the database table will be read at start up (added to the
   ones defined with the rtpproxy_sock module parameter) and when
   the MI command nh_reload_rtpp is issued(the definitions will be
   replaced with the ones from the database table).

   Default value is "NULL".

   Example 1.16. Set db_url parameter
...
modparam("nathelper", "db_url",
                "mysql://opensips:opensipsrw@192.168.2.132/opensips")
...


1.6.18. db_table (string)

   The name of the database table containing definitions of
   socket(s) used to connect to (a set) RTPProxy.

   Default value is "nh_sockets".

   Example 1.17. Set db_table parameter
...
modparam("nathelper", "db_table", "nh_rtpp")
...


1.6.19. rtpp_socket_col (string)

   The name rtpp socket column in the database table.

   Default value is "rtpproxy_sock".

   Example 1.18. Set rtpp_socket_col parameter
...
modparam("nathelper", "rtpp_socket_col", "rtpp_socket")
...


1.6.20. set_id_col (string)

   The name set id column in the database table.

   Default value is "set_id".

   Example 1.19. Set set_id parameter
...
modparam("nathelper", "set_id_col", "rtpp_set_id")
...


1.6.21. rtpp_notify_socket (string)

   The name set id column in the database table.

   Default value is "NULL".

   Example 1.20. Set rtpp_notify_socket parameter
...
modparam("nathelper", "rtpp_notify_socket", "tcp:10.10.10.10:9999")
...


1.7. Exported Functions

1.7.1.  fix_nated_contact([uri_params])

   Rewrites the URI Contact HF to contain request's source
   address:port. If a list of URI parameter is provided, it will
   be added to the modified contact;

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   BRANCH_ROUTE.

   Example 1.21. fix_nated_contact usage
...
if (search("User-Agent: Cisco ATA.*") {
    fix_nated_contact(";ata=cisco");
} else {
    fix_nated_contact();
}
...

1.7.2.  fix_nated_sdp(flags [, ip_address])

   Alters the SDP information in orer to facilitate NAT traversal.
   What changes to be performed may be controled via the "flags"
   paramter.

   Meaning of the parameters is as follows:
     * flags - the value may be a bitwise OR of the following
       flags:
          + 0x01 - adds "a=direction:active" SDP line;
          + 0x02 - rewrite media IP address (c=) with source
            address of the message or the provided IP address (the
            provide IP address take precedence over the source
            address).
          + 0x04 - adds "a=nortpproxy:yes" SDP line;
          + 0x08 - rewrite IP from origin description (o=) with
            source address of the message or the provided IP
            address (the provide IP address take precedence over
            the source address).
     * ip_address - IP to be used for rewritting SDP. If not
       specified, the received signalling IP will be used. The
       parameter allows pseudo-variables usage. NOTE: For the IP
       to be used, you need to use 0x02 or 0x08 flags, otherwise
       it will have no effect.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1.22. fix_nated_sdp usage
...
if (search("User-Agent: Cisco ATA.*") {fix_nated_sdp("3");};
...

1.7.3.  set_rtp_proxy_set()

   Sets the Id of the rtpproxy set to be used for the next
   unforce_rtp_proxy(), rtpproxy_offer() or rtpproxy_answer()
   command.

   Paramter can also be a pseudo-variable that contain (as string
   or integer) the ID of the rtpproxy set to be used.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   BRANCH_ROUTE.

   Example 1.23. fix_nated_contact usage
...
set_rtp_proxy_set("2");
rtpproxy_offer();
...

1.7.4.  rtpproxy_offer([flags [, ip_address]])

   Rewrites SDP body to ensure that media is passed through an RTP
   proxy. To be invoked on INVITE for the cases the SDPs are in
   INVITE and 200 OK and on 200 OK when SDPs are in 200 OK and
   ACK.

   Meaning of the parameters is as follows:
     * flags - flags to turn on some features.
          + a - flags that UA from which message is received
            doesn't support symmetric RTP.
          + l - force "lookup", that is, only rewrite SDP when
            corresponding session is already exists in the RTP
            proxy. By default is on when the session is to be
            completed (reply in non-swap or ACK in swap mode).
          + i - flags that message is received from UA in the LAN
            (internal network). Only makes sense when RTP proxy is
            running in the bridge mode.
          + e - flags that message is received from UA in the WAN
            (external network). Only makes sense when RTP proxy is
            running in the bridge mode.
          + f - instructs nathelper to ignore marks inserted by
            another nathelper in transit to indicate that the
            session is already goes through another proxy. Allows
            creating chain of proxies.
          + r - flags that IP address in SDP should be trusted.
            Without this flag, nathelper ignores address in the
            SDP and uses source address of the SIP message as
            media address which is passed to the RTP proxy.
          + o - flags that IP from the origin description (o=)
            should be also changed.
          + c - flags to change the session-level SDP connection
            (c=) IP if media-description also includes connection
            information.
          + w - flags that for the UA from which message is
            received, support symmetric RTP must be forced.
          + zNN - requests the RTPproxy to perform
            re-packetization of RTP traffic coming from the UA
            which has sent the current message to increase or
            decrease payload size per each RTP packet forwarded if
            possible. The NN is the target payload size in ms, for
            the most codecs its value should be in 10ms
            increments, however for some codecs the increment
            could differ (e.g. 30ms for GSM or 20ms for G.723).
            The RTPproxy would select the closest value supported
            by the codec. This feature could be used for
            significantly reducing bandwith overhead for low
            bitrate codecs, for example with G.729 going from 10ms
            to 100ms saves two thirds of the network bandwith.
     * ip_address - new SDP IP address.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1.24. rtpproxy_offer usage
route {
...
    if (is_method("INVITE")) {
        if (has_sdp()) {
            if (rtpproxy_offer())
                t_on_reply("1");
        } else {
            t_on_reply("2");
        }
    }
    if (is_method("ACK") && has_sdp())
        rtpproxy_answer();
...
}

onreply_route[1]
{
...
    if (has_sdp())
        rtpproxy_answer();
...
}

onreply_route[2]
{
...
    if (has_sdp())
        rtpproxy_offer();
...
}

1.7.5.  rtpproxy_answer([flags [, ip_address]])

   Rewrites SDP body to ensure that media is passed through an RTP
   proxy. To be invoked on 200 OK for the cases the SDPs are in
   INVITE and 200 OK and on ACK when SDPs are in 200 OK and ACK.

   See rtpproxy_offer() function description above for the meaning
   of the parameters.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1.25. rtpproxy_answer usage

   See rtpproxy_offer() function example above for example.

1.7.6.  unforce_rtp_proxy()

   Tears down the RTPProxy session for the current call.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

   Example 1.26. unforce_rtp_proxy usage
...
unforce_rtp_proxy();
...

1.7.7.  rtpproxy_stream2uac(prompt_name, count),
rtpproxy_stream2uas(prompt_name, count)

   Instruct the RTPproxy to stream prompt/announcement pre-encoded
   with the makeann command from the RTPproxy distribution. The
   uac/uas suffix selects who will hear the announcement
   relatively to the current transaction - UAC or UAS. For example
   invoking the rtpproxy_stream2uac in the request processing
   block on ACK transaction will play the prompt to the UA that
   has generated original INVITE and ACK while
   rtpproxy_stop_stream2uas on 183 in reply processing block will
   play the prompt to the UA that has generated 183.

   Apart from generating announcements, another possible
   application of this function is implementing music on hold
   (MOH) functionality. When count is -1, the streaming will be in
   loop indefinitely until the appropriate
   rtpproxy_stop_stream2xxx is issued.

   In order to work correctly, functions require that the session
   in the RTPproxy already exists. Also those functions don't
   alted SDP, so that they are not substitute for calling
   rtpproxy_offer or rtpproxy_answer.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE.

   Meaning of the parameters is as follows:
     * prompt_name - name of the prompt to stream. Should be
       either absolute pathname or pathname relative to the
       directory where RTPproxy runs.
     * count - number of times the prompt should be repeated. The
       value of -1 means that it will be streaming in loop
       indefinitely, until appropriate rtpproxy_stop_stream2xxx is
       issued.

   Example 1.27. rtpproxy_stream2xxx usage
...
    if (is_method("INVITE")) {
        rtpproxy_offer();
        if ($rb=~ "0\.0\.0\.0") {
            rtpproxy_stream2uas("/var/rtpproxy/prompts/music_on_hold", "
-1");
        } else {
            rtpproxy_stop_stream2uas();
        };
    };
...

1.7.8.  rtpproxy_stop_stream2uac(), rtpproxy_stop_stream2uas()

   Stop streaming of announcement/prompt/MOH started previously by
   the respective rtpproxy_stream2xxx. The uac/uas suffix selects
   whose announcement relatively to tha current transaction should
   be stopped - UAC or UAS.

   These functions can be used from REQUEST_ROUTE, ONREPLY_ROUTE.

1.7.9.  add_rcv_param([flag]),

   Add received parameter to Contact header fields or Contact URI.
   The parameter will contain URI created from the source IP,
   port, and protocol of the packet containing the SIP message.
   The parameter can be then processed by another registrar, this
   is useful, for example, when replicating register messages
   using t_replicate function to another registrar.

   Meaning of the parameters is as follows:
     * flag - flags to indicate if the parameter should be added
       to Contact URI or Contact header. If the flag is non-zero,
       the parameter will be added to the Contact URI. If not used
       or equal to zero, the parameter will go to the Contact
       header.

   This function can be used from REQUEST_ROUTE.

   Example 1.28. add_rcv_paramer usage
...
add_rcv_param(); # add the parameter to the Contact header
....
add_rcv_param("1"); # add the paramter to the Contact URI
...

1.7.10.  fix_nated_register()

   The function creates a URI consisting of the source IP, port,
   and protocol and stores the URI in an Attribute-Value-Pair. The
   URI will be appended as "received" parameter to Contact in 200
   OK and registrar will store it in the user location database.

   This function can be used from REQUEST_ROUTE.

   Example 1.29. fix_nated_register usage
...
fix_nated_register();
...

1.7.11.  nat_uac_test(flags)

   Tries to guess if client's request originated behind a nat. The
   parameter determines what heuristics is used.

   Meaning of the flags is as follows:
     * 1 - Contact header field is searched for occurrence of
       RFC1918 addresses.
     * 2 - the "received" test is used: address in Via is compared
       against source IP address of signaling
     * 4 - Top Most VIA is searched for occurrence of RFC1918
       addresses
     * 8 - SDP is searched for occurrence of RFC1918 addresses
     * 16 - test if the source port is different from the port in
       Via
     * 32 - address in Contact is compared against source IP
       address of signaling

   All flags can be bitwise combined, the test returns true if any
   of the tests identified a NAT.

   This function can be used from REQUEST_ROUTE, ONREPLY_ROUTE,
   FAILURE_ROUTE, BRANCH_ROUTE.

1.7.12.  start_recording()

   This command will send a signal to the RTP-Proxy to record the
   RTP stream on the RTP-Proxy.

   This function can be used from REQUEST_ROUTE and ONREPLY_ROUTE.

   Example 1.30. start_recording usage
...
start_recording();
...

1.8. MI Commands

1.8.1. nh_enable_ping

   Enables natping if parameter value greater than 0. Disables
   natping if parameter value is 0. With no parameter, it returns
   the current natping status.

   The function may takean optional parameter (for set operations)
   - a number in decimal format.

   Example 1.31. nh_enable_ping usage
...
$ opensipsctl fifo nh_enable_ping
Status:: 1
$
$ opensipsctl fifo nh_enable_ping 0
$
$ opensipsctl fifo nh_enable_ping
Status:: 0
$
...

1.8.2. nh_enable_rtpp

   Enables a rtp proxy if parameter value is greater than 0.
   Disables it if a zero value is given.

   The first parameter is the rtp proxy url (exactly as defined in
   the config file).

   The second parameter value must be a number in decimal.

   NOTE: if a rtpproxy is defined multiple times (in the same or
   diferente sete), all its instances will be enables/disabled.

   Example 1.32.  nh_enable_rtpp usage
...
$ opensipsctl fifo nh_enable_rtpp udp:192.168.2.133:8081 0
...

1.8.3. nh_show_rtpp

   Displays all the rtp proxies and their information: set and
   status (disabled or not, weight and recheck_ticks).

   No parameter.

   Example 1.33.  nh_show_rtpp usage
...
$ opensipsctl fifo nh_show_rtpp
...

1.8.4. nh_reload_rtpp

   Reload rtp proxies sets from database. The function will delete
   all previous records and populate the list with the entries
   from the database table. The db_url parameter must be set if
   you want to use this command.

   No parameter.

   Example 1.34.  nh_reload_rtpp usage
...
$ opensipsctl fifo nh_reload_rtpp
...

Chapter 2. Frequently Asked Questions

   2.1.

       What happend with "rtpproxy_disable" parameter?

       It was removed as it became obsolete - now "rtpproxy_sock" can
       take empty value to disable the rtpproxy functionality.

   2.2.

       Where can I find more about OpenSIPS?

       Take a look at http://www.opensips.org/.

   2.3.

       Where can I post a question about this module?

       First at all check if your question was already answered on one
       of our mailing lists:
         * User Mailing List -
           http://lists.opensips.org/cgi-bin/mailman/listinfo/users
         * Developer Mailing List -
           http://lists.opensips.org/cgi-bin/mailman/listinfo/devel

       E-mails regarding any stable OpenSIPS release should be sent to
       <users@lists.opensips.org> and e-mails regarding development
       versions should be sent to <devel@lists.opensips.org>.

       If you want to keep the mail private, send it to
       <users@lists.opensips.org>.

   2.4.

       How can I report a bug?

       Please follow the guidelines provided at:
       http://sourceforge.net/tracker/?group_id=232389.
