
Presence Module

Anca-Maria Vamanu

   voice-system.ro

Edited by

Anca-Maria Vamanu

   Copyright © 2006 voice-system.ro
     _________________________________________________________

   Table of Contents
   1. User's Guide

        1.1. Overview
        1.2. Dependencies

              1.2.1. OpenSER Modules
              1.2.2. External Libraries or Applications

        1.3. Exported Parameters

              1.3.1. db_url(str)
              1.3.2. presentity_table(str)
              1.3.3. active_watchers_table(str)
              1.3.4. watchers_table(str)
              1.3.5. clean_period (int)
              1.3.6. to_tag_pref (str)
              1.3.7. lock_set_size (int)
              1.3.8. expires_offset (int)
              1.3.9. max_expires (int)
              1.3.10. server_address (str)

        1.4. Exported Functions

              1.4.1. handle_publish(char* sender_uri)
              1.4.2. handle_subscribe()

        1.5. Installation

   2. Developer's Guide

        2.1. bind_presence(event_api_t* api)
        2.2. add_event(ev_t* event)
        2.3. apply_auth_nbody
        2.4. is_watcher_allowed
        2.5. agg_nbody
        2.6. free_body
        2.7. evs_publ_handl
        2.8. evs_subs_handl

   3. Frequently Asked Questions

   List of Examples
   1-1. Set db_url parameter
   1-2. Set presentity_table parameter
   1-3. Set active_watchers_table parameter
   1-4. Set watchers_table parameter
   1-5. Set clean_period parameter
   1-6. Set to_tag_pref parameter
   1-7. Set lock_set_size parameter
   1-8. Set expires_offset parameter
   1-9. Set max_expires parameter
   1-10. Set server_address parameter
   1-11. handle_publish usage
   1-12. handle_subscribe usage
   1-13. PRESENCE tables
   2-1. event_api_t structure
     _________________________________________________________

Chapter 1. User's Guide

1.1. Overview

   The modules handles PUBLISH and SUBSCRIBE messages and
   generates NOTIFY messages in a general, event independent way.
   It allows registering events to it from other OpenSER modules.
   Events that can currently be added to it are: presence,
   presence.winfo, dialog;sla from presence_xml module and
   message-summary from presence_mwi module.

   The modules works with database storage. It stores published
   information and Subscribe -Notify dialog characteristics.

   The server follows the specifications in: RFC3265, RFC3856,
   RFC3857, RFC3858.
     _________________________________________________________

1.2. Dependencies

1.2.1. OpenSER Modules

   The following modules must be loaded before this module:

     * a database module.
     * sl.
     * tm.
     _________________________________________________________

1.2.2. External Libraries or Applications

   None.
     _________________________________________________________

1.3. Exported Parameters

1.3.1. db_url(str)

   The database url.

   Default value is "NULL". 

   Example 1-1. Set db_url parameter
...
modparam("presence", "db_url",
        "mysql://openser:openserrw@192.168.2.132/openser")
...
     _________________________________________________________

1.3.2. presentity_table(str)

   The name of the db table where Publish information are stored.

   Default value is "presentity". 

   Example 1-2. Set presentity_table parameter
...
modparam("presence", "presentity_table", "presentity");
...
     _________________________________________________________

1.3.3. active_watchers_table(str)

   The name of the db table where active subscription information
   are stored.

   Default value is "active_watchers". 

   Example 1-3. Set active_watchers_table parameter
...
modparam("presence", "active_watchers_table", "active_watchers")
...
     _________________________________________________________

1.3.4. watchers_table(str)

   The name of the db table where subscription states are stored.

   Default value is "watchers". 

   Example 1-4. Set watchers_table parameter
...
modparam("presence", "watchers_table", "watchers")
...
     _________________________________________________________

1.3.5. clean_period (int)

   The period at which to verify if there are expired messages
   stored in database.

   Default value is "100". 

   Example 1-5. Set clean_period parameter
...
modparam("presence", "clean_period", 100)
...
     _________________________________________________________

1.3.6. to_tag_pref (str)

   The prefix used when generating to_tag when sending replies
   for SUBSCRIBE requests.

   Default value is "10". 

   Example 1-6. Set to_tag_pref parameter
...
modparam("presence", "to_tag_pref", 'a')
...
     _________________________________________________________

1.3.7. lock_set_size (int)

   The size of the lock used for synchronizing updating
   information from database.

   Default value is "8". 

   Example 1-7. Set lock_set_size parameter
...
modparam("presence", "lock_set_size", 8)
...
     _________________________________________________________

1.3.8. expires_offset (int)

   The value that should be subtracted from the expires value
   when sending a 200OK for a publish. It is used for forcing the
   client cu send an update before the old publish expires.

   Default value is "0". 

   Example 1-8. Set expires_offset parameter
...
modparam("presence", "expires_offset", 10)
...
     _________________________________________________________

1.3.9. max_expires (int)

   The the maximum admissible expires value for PUBLISH/SUBSCRIBE
   message.

   Default value is "3600". 

   Example 1-9. Set max_expires parameter
...
modparam("presence", "max_expires", 3600)
...
     _________________________________________________________

1.3.10. server_address (str)

   The presence server address which will become the value of
   Contact header filed for 200OK replyes to Subscribe and
   Publish and in Notify messages.

   Example 1-10. Set server_address parameter
...
modparam("presence", "server_address", "sip:10.10.10.10:5060")
...
     _________________________________________________________

1.4. Exported Functions

1.4.1. handle_publish(char* sender_uri)

   The function handles PUBLISH requests. It stores and updates
   published information in database and calls functions to send
   NOTIFY messages when changes in the published information
   occur. It takes one argument -> sender_uri. The parameter was
   added for enabling BLA implementation. If present,
   Notification of a change in published state is not sent to the
   respective uri even though a subscription exists. It should be
   taken from the Sender header. It was left at the decision of
   the administrator whether or not to transmit the content of
   this header as parameter for handle_publish, to prevent
   security problems.

   This function can be used from REQUEST_ROUTE.

   Example 1-11. handle_publish usage
...
        if(is_method("PUBLISH"))
        {
                if($hdr(Sender)!= NULL)
                        handle_publish("$hdr(Sender)");
                else
                        handle_publish("");
                t_release();
        }
...
     _________________________________________________________

1.4.2. handle_subscribe()

   The function which handles SUBSCRIBE requests. It stores or
   updates information in database and calls functions to send
   Notify messages when a Subscribe which initiate a dialog is
   received

   This function can be used from REQUEST_ROUTE.

   Example 1-12. handle_subscribe usage
...
if(method=="SUBSCRIBE")
    handle_subscribe();
...
     _________________________________________________________

1.5. Installation

   The module requires 3 table in OpenSER database. Next SQL
   statements shows the syntax to create them.

   Example 1-13. PRESENCE tables
...

use openser;

CREATE TABLE `presentity` (
  `id` int(10)  NOT NULL auto_increment,
  `username` varchar(64) NOT NULL,
  `domain` varchar(124) NOT NULL,
  `event` varchar(64) NOT NULL,
  `etag` varchar(64) NOT NULL,
  `expires` int(11) NOT NULL,
  `received_time` int(11) NOT NULL,
  `body` text NOT NULL,
  UNIQUE KEY `uk_id` (`id`),
  UNIQUE KEY `udee_presentity` (`username`,`domain`,`event`, `etag`),
  KEY `ude_presentity` (`username`,`domain`,`event`),
  KEY `exp_presentity` (`expires`)
) ENGINE=MyISAM;


CREATE TABLE `active_watchers` (
  `id` int(10) NOT NULL auto_increment,
  `pres_user` varchar(64) NOT NULL,
  `pres_domain` varchar(128) NOT NULL,
  `to_user` varchar(64) NOT NULL,
  `to_domain` varchar(128) NOT NULL,
  `from_user` varchar(64) NOT NULL,
  `from_domain` varchar(128) NOT NULL,
  `event` varchar(64) NOT NULL default 'presence',
  `event_id` varchar(64) default NULL,
  `to_tag` varchar(128) NOT NULL,
  `from_tag` varchar(128) NOT NULL,
  `callid` varchar(128) NOT NULL,
  `local_cseq` int(11) NOT NULL,
  `remote_cseq` int(11) NOT NULL,
  `contact` varchar(128) NOT NULL,
  `record_route` text,
  `expires` int(11) NOT NULL,
  `status` varchar(32) NOT NULL default 'pending',
  `version` int(11) default '0',
  `socket_info` varchar(128) NOT NULL,
  `local_contact` varchar(255) NOT NULL,
  PRIMARY KEY  (`id`),
  UNIQUE KEY `tt_watchers` (`to_tag`),
  KEY `ude_active_watchers` (`pres_domain`,`pres_user`,`event`),
  KEY `exp_active_watchers` (`expires`)
) ENGINE=MyISAM;


CREATE TABLE `watchers` (
  `id` int(10) NOT NULL auto_increment,
  `p_user` varchar(64) NOT NULL,
  `p_domain` varchar(128) NOT NULL,
  `w_user` varchar(64) NOT NULL,
  `w_domain` varchar(128) NOT NULL,
  `subs_status` varchar(64) NOT NULL,
  `reason` varchar(64),
  `inserted_time` int(11) NOT NULL,
  UNIQUE KEY udud_watchers (`p_user`,`p_domain`,`w_user`,`w_domain`),
  PRIMARY KEY (id)
) ENGINE=MyISAM;


...
     _________________________________________________________

Chapter 2. Developer's Guide

   The module provides the following functions that can be used
   in other OpenSER modules.
     _________________________________________________________

2.1. bind_presence(event_api_t* api)

   This function binds the presence modules and fills the
   structure with one exported function -> add_event, which when
   called adds a new event to be handled by presence.

   Example 2-1. event_api_t structure
...
typedef struct event_api {
        add_event_t add_event;
} event_api_t;
...
     _________________________________________________________

2.2. add_event(ev_t* event)

   This function receives as a parameter a structure with event
   specific information and adds it to presence list.

   The structure received as a parameter:
...
typedef struct ev
{
        str name;
        str* param;         // required param
        str stored_name;
        str content_type;
        int type;
/*      it can be: PUBL_TYPE or WINFO_TYPE */
        int req_auth;
/* flag to mark if the event requires authorization*/
        apply_auth_t*  apply_auth_nbody;
        is_allowed_t*  is_watcher_allowed;

        agg_nbody_t* agg_nbody;
        publ_handling_t  * evs_publ_handl;
        subs_handling_t  * evs_subs_handl;
        free_body_t*    free_body;

/* this two should not be filed when the structure is given as a
        parmeter for add_event function */
        struct ev* wipeer;
        struct ev* next;

}ev_t;
...
     _________________________________________________________

2.3. apply_auth_nbody

   This parameter should be a function to be calledfor an event
   that requires authorization, when constructing final body. It
   is called only if the req_auth field is not 0.

   Filed type:
...
typedef int (apply_auth_t)(str* , struct subscription*, str* );
..
     _________________________________________________________

2.4. is_watcher_allowed

   This filed is a function to be called for a subscription
   request to return the state for that subscription according to
   authorization rules. It is called only if the req_auth field
   is not 0.

   Filed type:
...
typedef int (is_allowed_t)(struct subscription* subs);
..
     _________________________________________________________

2.5. agg_nbody

   If present, this field marks that the events requires
   aggregation of states. This function receives a body array and
   should return the final body. If not present, it is considered
   that the event does not require aggregation and the most
   recent published information is used when constructing
   Notifies.

   Filed type:
...
typedef str* (agg_nbody_t)(str** body_array, int n, int off_index);
..
     _________________________________________________________

2.6. free_body

   This field must be field in if subsequent processing is
   performed on the info from database before beeing inserted in
   Notify message body(if agg_nbody or apply_auth_nbody fields
   are filled in). It should match the allocation function used
   when processing the body.

   Filed type:
...
typedef void(free_body_t)(char* body);
..
     _________________________________________________________

2.7. evs_publ_handl

   This function is called when handling Publish requests. Most
   contain body correctitude check.

...
typedef int (publ_handling_t)(struct sip_msg*);
..
     _________________________________________________________

2.8. evs_subs_handl

   It is not compulsory. Should contain event specific handling
   for Subscription requests.

   Filed type:
...
typedef int (subs_handling_t)(struct sip_msg*);
..
     _________________________________________________________

Chapter 3. Frequently Asked Questions

   3.1. Where can I find more about OpenSER?
   3.2. Where can I post a question about this module?
   3.3. How can I report a bug?

   3.1. Where can I find more about OpenSER?

   Take a look at http://openser.org/.

   3.2. Where can I post a question about this module?

   First at all check if your question was already answered on
   one of our mailing lists:

     * User Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/users
     * Developer Mailing List -
       http://openser.org/cgi-bin/mailman/listinfo/devel

   E-mails regarding any stable OpenSER release should be sent to
   <users@openser.org> and e-mails regarding development versions
   should be sent to <devel@openser.org>.

   If you want to keep the mail private, send it to
   <team@openser.org>.

   3.3. How can I report a bug?

   Please follow the guidelines provided at:
   http://sourceforge.net/tracker/?group_id=139143.
