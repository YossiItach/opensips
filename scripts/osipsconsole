#!/usr/bin/perl 
#
#$Id:$
#
# Copyright (C) 2008 Voice Sistem S.R.L
#
# This file is part of opensips, a free SIP server.
#
# opensips is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version
#
# opensips is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# History:
# -------
#  2008-10-10  first version (iulia_bublea)
#

use strict;
#use warnings;
use Term::ReadLine;
use Switch;
use DBI;
use POSIX;

####variables that need to be changed

##### ------------------------------------------------ #####
#

####path to the directory where opensips binaries are...
####asta pica...si OSIPSBIN...unde e plasat opensipsctlrc

my $PATH_BIN = "./";
my $PATH_CTLRC = "./scripts/";
my $PATH_ETC = "./etc/";


my $OPENSIPSCTLRC = "";
### include config files
if ( -e  $PATH_CTLRC . "opensipsctlrc" ) {
	$OPENSIPSCTLRC = $PATH_CTLRC . "opensipsctlrc";
	&include_opensipsctlrc();	
}


if ( -e "~/.opensipsctlrc" ) {
	$OPENSIPSCTLRC = "~/.opensipsctlrc";
	&include_opensipsctlrc();	
}



my $OSIPSBIN = $PATH_BIN . "opensips";


### aliases configuration  ( DB | UL )
my $ALIASES_TYPE = "DB";

my $ETCDIR = " ";

my $OSIPS_FIFO = " ";
my $name = "fifo_reply";
my $path = "/tmp/" . $name;
my $PID_FILE = "";
my $DBENGINE = "";
my $SIP_DOMAIN = "";
my $VERIFY_ACL = 0;
my @ACL_GROUPS;
my $DBNAME = " ";
my $DBHOST = " ";
my $DBRWUSER = " ";
my $DBROUSER = " ";
my $DBROPW = " ";
my $DBROOTUSER = " ";
my $CTLENGINE = "";
	
my $content;
my @arr;
my $var_name;
my $EGREP = " ";
my $SYSLOG = "";
my $STARTOPTIONS = " ";
my $DIR = " ";
my $TOOLPATH = " ";
my $AWK = " ";
my $MD5 = " ";
my $SED = " ";
my $LAST_LINE = " ";
my $EXPR = " ";
my $WATCH_PERIOD = " ";
##### ----------------------------------------------- #####
#### Defined values
my $ALL_METHODS=4294967295;
my $USERNAME_RE="[-a-zA-Z0-9&=\+\$,;\?/_\.\!~\*'\(\)]+";

my $OSIPSUSER = " ";
my $OSIPSDOMAIN = " ";
my @OSIPS ;
my $CTLENGINELOADED = 0;
my $STORE_PLAINTEXT_PW;
my $ENABLE_ALIASES = 0;
my $ALIAS_EXISTS = 0;


my $ALIAS_DB_EXISTS = " ";
my $ALIAS_UL_EXISTS = " ";
 
my $DBENGINELOADED;
my $PASS="";
my $HA1;
my $HA1B;
my $sth;
my $dbh;
my @row;

my $RET;
my $RES;
my $result = 0;
my $cmd_fifo;

my $CHROOT_DIR;
my $input;
my $response;
my $CHECK_SUB;
my $USRLOC_TABLE;
my @content;	
my $line;	


####CLI control variables
my $term = Term::ReadLine->new("OpenSIPS");
my $OUT = $term->OUT() ||\*STDOUT;
my @cmd;
my @command_list = ('acl'=> ('show','grant','revoke'),
		    'add'=>'add',
		    'avp'=>('list','add','rm'),
		    'passwd'=>'passwd',
		    'rm'=>'rm',
		    'alias'=>('show','rm','add'),
	            'usrloc'=>('show','rm','add'),
		    'ul'=>('show','rm','add'),
		    'alias_db'=> ('list','show','add','rm'),
		    'aliasdb'=> ('list','show','add','rm'),		   		    
		    'domain'=> ('reload','show','showdb','add','rm'),	
		    'trusted'=> ('show','dump','reload','add','rm'),
		    'fifo'=>'fifo',		 
		    'lcr'=> ('show','reload','addgw','rmgw','addroute','rmroute'),	
		    'cr' => ('show','reload','dump','addrt','rmrt','addcarrier','rmcarrier'),
		    'dispatcher'=>('show','addgw','rmgw','reload','dump'),
		    'monitor'=>'monitor',
		    'console'=>'monitor',
		    'moni'=>'monitor',
		    'con'=>'monitor',
		    'online'=>'online',		   		     	 
		    'ping'=>'ping',
		    'ps'=>'ps',
		    'restart' => 'restart',
		    'rpid'=> ('add','rm','show'),
		    'speeddial'=> ('list','show','add','rm'),
		    'speed_dial'=> ('list','show','add','rm'),
	            'tls'=>('rootCA','userCERT'),
		    'start' => 'start',
		    'stop'  => 'stop',
		    'version'=>'version',
		    'db'=>('exec','roexec','run','rorun','show'),
		    'dialplan'=>('show','addrule','rm','rmpid','rmrule','reload')
		    );
  		    
		    
		    
my @output;
my $attribs = $term->Attribs;
my $command;


#
##### ------------------------------------------------ #####
###paths are either initialized in the script or in the opensipsctlrc file
sub include_opensipsctlrc() {
	open (FILE,"< $OPENSIPSCTLRC") || die "Can't Open File: opensipsctlrc\n";

	while ($line=<FILE>){		
		if ( $line !~ m/^(\s*\w+)/g ) {				
			next;
		} else {
			#print $line;
			unshift(@content,$line);
		}

	}

	close(FILE);
}
while ( $#content gt -1 ){
	my $res = shift(@content);
	my @arr = split("=",$res); 	
	chomp($arr[1]);

		#initializing global vars

		if ( !-z $PID_FILE){
			if ( $arr[0] =~ /^\s*PID_FILE/ ){				
				$PID_FILE = $arr[1];	
			}
		}

		if ( $SYSLOG eq "" ) {
			if ( $arr[0] =~ /^\s*SYSLOG/ ) {
			 	$SYSLOG = $arr[1]; 
			} 			
		}

		if ( $STARTOPTIONS eq "" ) {
			if ( $arr[0] =~ /^\s*STARTOPTIONS/ ) {
			 	$STARTOPTIONS = $arr[1]; 
			}
		}

		if ( $ALIASES_TYPE eq "" ) {
			if (  $arr[0] =~ /^\s*ALIASES_TYPE/ ) {
			 	$ALIASES_TYPE = $arr[1]; 
			}
			if ( $ALIASES_TYPE =~ /^UL/ ) {
				$ENABLE_ALIASES = 1;
			} elsif ( $ALIASES_TYPE =~ /DB/ ) {
					$ENABLE_ALIASES = 2;
			}
		}

		if ( $CTLENGINE eq "" ) {
			if (   $arr[0] =~ /^\s*CTLENGINE$/ ) {
			 	$CTLENGINE = $arr[1]; 
				$CTLENGINELOADED = 1;
			}
		}
		
		##### ------------------------------------------------ #####
		### ACL name verification
		if ( !$VERIFY_ACL ) {
			if ( $arr[0] =~ /^\s*VERIFY_ACL/ ) {
			 	$VERIFY_ACL = $arr[1]; 
			}

		}					

		if ( @ACL_GROUPS eq "") {
			if ( $arr[0] =~ /^\s*ACL_GROUPS/ ) {
			 	@ACL_GROUPS = $arr[1]; 
			}
		}

		##### ----------------------------------------------- #####
		### common variables and functions for SQL engines
		
		if ( $DBENGINE eq "" ) {
			if ( $arr[0] =~ /^\s*DBENGINE/ ) {
			 	$DBENGINE = lc ($arr[1]); 				
			}			
		}

		if ( $DBNAME eq "" ) {
			if ( $arr[0] =~ /^\s*DBNAME/ ) {
			 	$DBNAME = $arr[1]; 
			}
		}


		if ( $DBHOST eq "" ) {
			if ( $arr[0] =~ /^\s*DBHOST/ ) {
			 	$DBHOST = $arr[1]; 
			}
		}

		if ( $DBRWUSER eq "" ) {
			if ( $arr[0] =~ /^\s*DBRWUSER/ ) {
			 	$DBRWUSER = $arr[1]; 
			}
		}

			# the read-only user for whom password may be stored here
		if ( $DBROUSER eq "" ) {
			if ( $arr[0] =~ /^\s*DBROUSER/ ) {
			 	$DBROUSER = $arr[1]; 
			}
		}

		if ( $DBROPW eq "" ) {
			if ( $arr[0] =~ /^\s*DBROPW/ ) {
			 	$DBROPW = $arr[1]; 
			}			
		}

		# full privileges SQL user
		if ( $DBROOTUSER eq "" ) {
			if ( $arr[0] =~ /^\s*DBROOTUSER/ ) {
			 	$DBROOTUSER = $arr[1]; 
			}			
		}
		
		if ( $SIP_DOMAIN eq "" ) {
			if ( $arr[0] =~ /^\s*SIP_DOMAIN/ ) {
			 	$SIP_DOMAIN = $arr[1]; 
			}			
		}

		if ( ! $STORE_PLAINTEXT_PW ) {
			if ( $arr[0] =~ /^\s*STORE_PLAINTEXT_PW/ ) {
			 	$STORE_PLAINTEXT_PW = $arr[1]; 
			}		
		}

		if ( $AWK eq "" ) {
			if ( $arr[0] =~ /^\s*AWK/ ) {
			 	$AWK = $arr[1]; 
			}		
		}

		if ( $EGREP eq "") {
			if ( $arr[0] =~ /^\s*EGREP/ ) {
			 	$EGREP = $arr[1]; 
			}		
		}

		if ( $SED eq "" ) {
			if ( $arr[0] =~ /^\s*SED/ ) {
			 	$SED = $arr[1]; 
			}		
		}

		if ( !-z $OSIPS_FIFO ) {
			if ( $arr[0] =~ /^\s*OSIPS_FIFO/ ) {
			 	$OSIPS_FIFO = $arr[1]; 
			}		
		}

} 	
	

if ( !-z $PID_FILE){
	$PID_FILE = "/var/run/opensips.pid";
}

if ( $SYSLOG eq "" ) {
	$SYSLOG = 0; # 0=output to console, 1=output to syslog
}

if ( $STARTOPTIONS eq "" ) {
	$STARTOPTIONS = ""; # for example -dddd
}

##### ------------------------------------------------ #####
### aliases configuration
#
if ( $ALIASES_TYPE =~ /^UL/ ) {
	$ENABLE_ALIASES = 1;
} elsif ( $ALIASES_TYPE =~ /DB/ ) {
	$ENABLE_ALIASES = 2;
}

#
##### ------------------------------------------------ #####
### CTLENGINE
#		
if ( $CTLENGINE eq "" ) {
	$CTLENGINE = "FIFO";
	$CTLENGINELOADED = 1;
}

if ( !-z $OSIPS_FIFO ) {		
	$OSIPS_FIFO = "/tmp/opensips_fifo";
}

##### ------------------------------------------------ #####
### ACL name verification
if ( ! $VERIFY_ACL ) {
	$VERIFY_ACL = 1;
}

if ( @ACL_GROUPS eq "") {
	@ACL_GROUPS=("local", "ld", "int", "voicemail", "free-pstn");
}

##### ----------------------------------------------- #####
### common variables and functions for SQL engines
if ( $DBENGINE eq "" ) {
	$DBENGINE = 'mysql';
}

if ( $DBNAME eq "" ) {
	$DBNAME = 'opensips';
}
	
if ( $DBHOST eq "" ) {
	$DBHOST = 'localhost';
}

if ( $DBRWUSER  eq "" ) {
	$DBRWUSER = 'opensips';
}

# the read-only user for whom password may be stored here
if ( $DBROUSER  eq ""  ) {
	$DBROUSER = 'opensipsro';
}

if ( $DBROPW  eq "" ) {
	$DBROPW = 'opensipsro';
}

# full privileges SQL user
if ( $DBROOTUSER  eq ""  ) {
	$DBROOTUSER = "root";
}

if ( ! $STORE_PLAINTEXT_PW ) {
	$STORE_PLAINTEXT_PW = 1; 
}
				
if ( !-z $DIR ) {
	$DIR = `dirname $0`;
	chomp($DIR);
}

#if ( !-z $OSIPSBIN ) {
#	$OSIPSBIN = $DIR."/opensips";		
#	chomp($OSIPSBIN);
#} 

### force values for variables in this section
# you better set the variables in ~/.opensipsctlrc
if ( !-z $ETCDIR ) {
	$ETCDIR="/usr/local/etc/opensips";	
}

if ( $EGREP eq " " ) {
	&locate_tool("egrep");		
	if ( !-e $TOOLPATH ){
		# now error, but we can look for alternative names if it is the case
		print "error: 'egrep' tool not found: set \$EGREP variable to correct tool path\n";		
	} else {
		$EGREP = $TOOLPATH;
	}
}
		
if ($AWK eq " ") {
	&locate_tool('awk');
	if ( !-e $TOOLPATH ) {
		# now error, but we can look for alternative names if it is the case
		print "error: 'awk' tool not found: set \$AWK variable to correct tool path\n";				
	} else {
		$AWK = $TOOLPATH;
	}
}

if ( $MD5 eq " ") {
	&locate_tool ('md5sum md5');
	if ( !-e $TOOLPATH ) {
		# now error, but we can look for alternative names if it is the case
		print "error: 'md5sum' or 'md5' tool not found: set MD5 variable to correct tool path\n";
	} else {			
		$MD5 = $TOOLPATH;
	}
}

if ( $EXPR eq " " ) {
	&locate_tool('expr');
	if ( !-e $TOOLPATH ) {
		# now error, but we can look for alternative names if it is the case
		print "error: 'expr' tool not found: set EXPR variable to correct tool path\n"
	} else {
		$EXPR= $TOOLPATH;
	}
}

#if ( $LAST_LINE eq " "  ) {
#	&locate_tool('tail');
#	if ( !-e $TOOLPATH ){
#		# now error, but we can look for alternative names if it is the case
#		print "error: 'TAIL' tool not found: set TAIL variable to correct tool path\n"
#	} else {
#		$LAST_LINE = `$TOOLPATH -n 1`;
#	}
#}


# period in which stats are reprinted
if ( -z $WATCH_PERIOD ) {
	$WATCH_PERIOD = 2;
}


##### ----------------------------------------------- #####
#### database tables for SQL databases 

# UsrLoc Table
my $UL_TABLE = " ";
if ( !-z $UL_TABLE ) {
	$UL_TABLE="location";
}
my %ul_table = ('USER_COLUMN' => 'username',
	     'DOMAIN_COLUMN' => 'domain',
             'CALLID_COLUMN'=> 'callid'
	      );


# subscriber table
my $SUB_TABLE = " ";
if ( !-z $SUB_TABLE ) {
	$SUB_TABLE='subscriber';
}
my %sub_table = ('REALM_COLUMN' => 'domain',
		 'HA1_COLUMN' => 'ha1',
		 'HA1B_COLUMN'=> 'ha1b',
		 'PASSWORD_COLUMN' => 'password',
		 'RPID_COLUMN' => 'rpid',
		 'SUBSCRIBER_COLUMN' => 'username',
		 'PHP_LIB_COLUMN' => 'phplib_id'

		  );


# acl table
my $ACL_TABLE = " ";
if ( !-z $ACL_TABLE ) {
	$ACL_TABLE = 'grp';
}
my %acl_table = ( 'ACL_USER_COLUMN' => 'username',
		  'ACL_DOMAIN_COLUMN' => 'domain',
		  'ACL_GROUP_COLUMN' => 'grp',
		  'ACL_MODIFIED_COLUMN' => 'last_modified'
		);



# aliases table
my $ALS_TABLE = " ";
if ( !-z $ALS_TABLE ) {
	$ALS_TABLE = 'aliases';
}
my %als_table = ('A_USER_COLUMN' => 'username',
		 'A_CONTACT_COLUMN' => 'contact',
		 'A_EXPIRES_COLUMN' => 'expires',
		 'A_Q_COLUMN' => 'q',
		 'A_CALLID_COLUMN' => 'callid',
		 'A_CSEQ_COLUMN' => 'cseq',
		 'A_LAST_MODIFIED_COLUMN' => 'last_modified'
		);

# domain table
my $DOMAIN_TABLE = " ";
if ( !-z $DOMAIN_TABLE ) {
	$DOMAIN_TABLE = 'domain';
}
my %domain_table = ('DO_DOMAIN_COLUMN' => 'domain',
		    'DO_LAST_MODIFIED_COLUMN' => 'last_modified',
		    );

# lcr tables
my $LCR_TABLE = " ";
if ( !-z $LCR_TABLE ) { 
	$LCR_TABLE = 'lcr';
}

my %lcr_table = ('LCR_PREFIX_COLUMN' => 'prefix',
		 'LCR_FROMURI_COLUMN' => 'from_uri',
		 'LCR_GRPID_COLUMN' => 'grp_id',
		 'LCR_PRIO_COLUMN' => 'priority'
		);

# gw table
my $GW_TABLE = " ";
if ( !-z $GW_TABLE ) {
	$GW_TABLE = 'gw';
}
my %gw_table = ('LCR_GW_GWNAME_COLUMN' => 'gw_name',
		'LCR_GW_GRPID_COLUMN' => 'grp_id',
		'LCR_GW_IP_COLUMN' => 'ip_addr',
		'LCR_GW_PORT_COLUMN' => 'port',
		'LCR_GW_URIS_COLUMN' => 'uri_scheme',
		'LCR_GW_PROTO_COLUMN' => 'transport',
		'LCR_GW_STRIP_COLUMN' => 'strip',
		'LCR_GW_TAG_COLUMN' => 'tag',
		'LCR_GW_FLAGS_COLUMN' => 'flags'
		);

# route_tree table
my $ROUTE_TREE_TABLE = " ";
if ( !-z $ROUTE_TREE_TABLE ) {
	$ROUTE_TREE_TABLE = 'route_tree';
}
my %route_tree_table = ('CARRIERROUTE_ROUTE_TREE_PREFIX_COLUMN' =>'id',
			'CARRIERROUTE_ROUTE_TREE_CARRIER_COLUMN' => 'carrier'
			);


# carrierroute table
my $CARRIERROUTE_TABLE = " ";
if ( !-z $CARRIERROUTE_TABLE ) {
	$CARRIERROUTE_TABLE = 'carrierroute';
}

my %carrierroute_table = ('CARRIERROUTE_CARRIERROUTE_PREFIX_COLUMN' => 'id',
 			  'CARRIERROUTE_CARRIERROUTE_CARRIER_COLUMN' => 'carrier',
			  'CARRIERROUTE_CARRIERROUTE_SCAN_PREFIX_COLUMN' => 'scan_prefix',
			  'CARRIERROUTE_CARRIERROUTE_DOMAIN_COLUMN' => 'domain',
			  'CARRIERROUTE_CARRIERROUTE_PROB_COLUMN' => 'prob',
			  'CARRIERROUTE_CARRIERROUTE_STRIP_COLUMN' => 'strip',
			  'CARRIERROUTE_CARRIERROUTE_REWRITE_HOST_COLUMN' => 'rewrite_host',
			  'CARRIERROUTE_CARRIERROUTE_REWRITE_PREFIX_COLUMN' => 'rewrite_prefix',
			  'CARRIERROUTE_CARRIERROUTE_REWRITE_SUFFIX_COLUMN' => 'rewrite_suffix',
			  'CARRIERROUTE_CARRIERROUTE_COMMENT_COLUMN' => 'description',
			  'CARRIERROUTE_CARRIERROUTE_FLAGS_COLUMN' => 'flags',
			  'CARRIERROUTE_CARRIERROUTE_MASK_COLUMN' => 'mask'
			);

# URI table
my $URI_TABLE = " ";
if ( !-z $URI_TABLE ) {
	$URI_TABLE = 'uri'
}
my %uri_table = ('URIUSER_COLUMN' => 'uri_user',
		 'MODIFIED_COLUMN' => 'last_modified'
		);

# dbaliases table
my $DA_TABLE = " ";
if ( !-z $DA_TABLE ) {
	$DA_TABLE = 'dbaliases';
}
my %da_table = ('DA_USER_COLUMN' => 'username',
		'DA_DOMAIN_COLUMN' => 'domain',
		'DA_ALIAS_USER_COLUMN' => 'alias_username',
		'DA_ALIAS_DOMAIN_COLUMN' => 'alias_domain'
		);

# speeddial table
my $SD_TABLE = " ";
if ( !-z $SD_TABLE ) {
	$SD_TABLE = 'speed_dial'
}
my %sd_table = ('SD_USER_COLUMN' => 'username',
		'SD_DOMAIN_COLUMN' => 'domain',
		'SD_SD_USER_COLUMN' => 'sd_username',
		'SD_SD_DOMAIN_COLUMN' => 'sd_domain',
		'SD_NEW_URI_COLUMN' => 'new_uri',
		'SD_DESC_COLUMN' => 'description'
		);

# avp table
my $AVP_TABLE = " ";
if ( !-z $AVP_TABLE ) {
	$AVP_TABLE = 'usr_preferences';
}
my %avp_table = ('AVP_UUID_COLUMN' => 'uuid',
		 'AVP_USER_COLUMN' => 'username',
		 'AVP_DOMAIN_COLUMN' => 'domain',
		 'AVP_ATTRIBUTE_COLUMN' => 'attribute',
		 'AVP_VALUE_COLUMN' => 'value',
		 'AVP_TYPE_COLUMN' => 'type',
		 'AVP_MODIFIED_COLUMN' => 'last_modified'
		);


# trusted table
my $TRUSTED_TABLE = " ";
if ( !-z $TRUSTED_TABLE ) {
	$TRUSTED_TABLE = 'trusted';
}
my %trusted_table = ('TRUSTED_SRC_IP_COLUMN' => 'src_ip',
		     'TRUSTED_PROTO_COLUMN' => 'proto',
		     'TRUSTED_FROM_PATTERN_COLUMN' => 'from_pattern',
		     'TRUSTED_TAG_COLUMN' => 'tag'
		    );


# dispatcher tables  
my $DISPATCHER_TABLE = " ";
if ( !-z $DISPATCHER_TABLE ){
	$DISPATCHER_TABLE = 'dispatcher';
}
my %dispatcher_table = ('DISPATCHER_ID_COLUMN' => 'id',
			'DISPATCHER_SETID_COLUMN' => 'setid',
			'DISPATCHER_DESTINATION_COLUMN' => 'destination',
			'DISPATCHER_FLAGS_COLUMN' => 'flags',
			'DISPATCHER_DESCRIPTION_COLUMN' => 'description'
			);



# dialplan tables
my $DIALPLAN_TABLE = " ";
if ( !-z $DIALPLAN_TABLE ) {
	$DIALPLAN_TABLE = 'dialplan';
}
my %dialplan_table = ('DIALPLAN_ID_COLUMN'=> 'id',
		'DIALPLAN_DPID_COLUMN' => 'dpid',
		'DIALPLAN_PR_COLUMN' => 'pr',
		'DIALPLAN_MATCH_OP_COLUMN' => 'match_op',
		'DIALPLAN_MATCH_EXP_COLUMN' => 'match_exp',
		'DIALPLAN_MATCH_LEN_COLUMN' => 'match_len',
		'DIALPLAN_SUBST_EXP_COLUMN' => 'subst_exp',
		'DIALPLAN_REPL_EXP_COLUMN' => 'repl_exp',
		'DIALPLAN_ATTRS_COLUMN' => 'attrs'
		);



##### ----------------------------------------------- #####
### path to useful tools

sub locate_tool() {
        while ( 1 ){
               if ( -x "/usr/bin/which" ) {
                        $TOOLPATH = `which @_`;
			chomp($TOOLPATH);
                        #if ( $TOOLPATH ) {
                        #       return $TOOLPATH;
                        #}
			return;
                }

                # look in common locations
                if ( -x "/usr/bin/".@_ ){
                        $TOOLPATH = "/usr/bin/".@_;
                        return;
                }

                if ( -x "/bin/".$_[0] ) {
                        $TOOLPATH = "/bin/".$_[0];
                        return;
                }
                if ( -x "/usr/local/bin/".$_[0] ) {
                        $TOOLPATH = "/usr/local/bin/$_[0]";
                        return;
                }
	      	last;
	}
	return;
}


#
##### ------------------------------------------------ #####
### usage functions
#


#online
sub usage_online() {
	print " -- command 'online' - dump online users from memory\n" .
	      "online ............................. display online users\n";
}


#monitor
sub usage_opensips_monitor() {
	print " -- command 'monitor' - show internal status\n" .
	      "monitor ............................ show server's internal status\n";
}


#ping
sub usage_ping() {
	print " -- command 'ping' - ping a SIP URI (OPTIONS)\n" .
	      "ping <uri> ......................... ping <uri> with SIP OPTIONS\n";
}


#usrloc
sub usage_usrloc() {
	print " -- command 'ul|alias' - manage user location or aliases\n" .
	      "ul show [<username>]................ show in-RAM online users\n" .
	      "ul show --brief..................... show in-RAM online users in short format\n" .
	      "ul rm <username> [<contact URI>].... delete user's usrloc entries\n" .
 	      "ul add <username> <uri> ............ introduce a permanent usrloc entry\n" .
	      "ul add <username> <uri> <expires> .. introduce a temporary usrloc entry\n" ;
}


#base - start|stop|restart
sub usage_base() {
	print " -- command 'start|stop|restart'\n" .
	      "restart ............................ restart OpenSIPS\n" .
	      "start .............................. start OpenSIPS\n" .
              "stop ............................... stop OpenSIPS\n";
}


#tls
sub usage_tls() {
	print " -- command 'tls'\n" .
 	      "tls rootCA [<etcdir>] .......... creates new rootCA\n" .
              "tls userCERT <user> [<etcdir>] ... creates user certificate\n" .
              "\t\t\t\tdefault <etcdir> is $ETCDIR/tls\n";
}


#acl
sub usage_acl() {
	print " -- command 'acl' - manage access control lists (acl)\n" .
	      "acl show [<username>] .............. show user membership\n" .
              "acl grant <username> <group> ....... grant user membership (*)\n" .
              "acl revoke <username> [<group>] .... revoke user membership(s) (*)\n";
}


#lcr
sub usage_lcr() {
	print " -- command 'lcr' - manage least cost routes (lcr)\n" .
	      "* IP addresses must be entered in dotted quad format e.g. 1.2.3.4 *\n" .
	      "* <uri_scheme> and <transport> must be entered in integer or text,*\n" .
              "* e.g. transport '2' is identical to transport 'tcp'.             *\n" .
   	      "*   scheme: 1=sip, 2=sips;   transport: 1=udp, 2=tcp, 3=tls       *\n" .
   	      "* Examples:  lcr addgw level3 1.2.3.4 5080 sip tcp 1              *\n" .
   	      "*            lcr addroute +1 '' 1 1                               *\n" .
	      "lcr show .....................................................................\n" .
           		"............. show routes, gateways and groups\n" .
	      "lcr reload ...................................................................\n" .
	           "............. reload lcr gateways\n" .
  	      "lcr addgw <gw_name> <ip> <port> <scheme> <transport> <grp_id> <flags> <tag> <strip>\n" .
              "............... add a gateway with flags, tag and strip ............\n" .
              "................(flags, tag, and strip are optional arguments) .....\n" .
              "lcr rmgw  <gw_name> ..........................................................\n" .
              "............... delete a gateway\n" .
              "lcr addroute <prefix> <from> <grp_id> <prio> .................................\n" .
              ".............. add a route ( use '' to match anything in <from> )\n" .
              "lcr rmroute  <prefix> <from> <grp_id> <prio> .................................\n" .
              ".............. delete a route\n";
}


#cr
sub usage_cr() {
	print " -- command 'cr' - manage carrierroute tables\n" . 
              "cr show ....................................................... show tables\n" .
              "cr reload ..................................................... reload tables\n" .
  	      "cr dump ....................................................... show in memory tables\n" .
 	      "cr addrt <routing_tree_id> <routing_tree> ..................... add a tree\n" .
 	      "cr rmrt  <routing_tree> ....................................... rm a tree\n" .
 	      "cr addcarrier <carrier> <scan_prefix> <domain> <rewrite_host> ................\n" .
                             "\t\t[<prob>] [<strip>] [<rewrite_prefix>] [<rewrite_suffix>] ...............\n" .
                             "\t\t[<flags>] [<mask>] [<comment>] .........................add a carrier\n" . 
               		     "\t\t(prob, strip, rewrite_prefix, rewrite_suffix,...................\n" .
                	     "\t\tflags, mask and comment are optional arguments) ...............\n" .
              "cr rmcarrier  <carrier> <scan_prefix> <domain> ................ rm a carrier\n";
}


#rpid
sub usage_rpid() {
	print " -- command 'rpid' - manage Remote-Party-ID (RPID)\n" .
	      "rpid add <username> <rpid> ......... add rpid for a user (*)\n" .
              "pid rm <username> ................. set rpid to NULL for a user (*)\n" . 
              "rpid show <username> ............... show rpid of a user\n";
}


#subscriber - add|passwd|rm
sub usage_subscriber() {
	print " -- command 'add|passwd|rm' - manage subscribers\n" .
	      "add <username> <password> .......... add a new subscriber (*)\n" .
	      "passwd <username> <passwd> ......... change user's password (*)\n" .
	      "rm <username> ...................... delete a user (*)\n";
}


#trusted
sub usage_trusted() {
	print " -- command 'add|dump|reload|rm|show' - manage trusted\n" .
	      "trusted show ...................... show db content\n" .
	      "trusted dump ...................... show cache content\n" .
	      "trusted reload .................... reload db table into cache\n" .
	      "trusted add <src_ip> <proto> <from_pattern> <tag>\n" .
		           "\t\t\t....................... add a new entry\n" .
		           "\t\t\t....................... (from_pattern and tag are optional arguments)\n" .
	      "trusted rm <src_ip> ............... remove all entries for the given src_ip\n";
}


#dispatcher
sub usage_dispatcher() {
	print " -- command 'dispatcher' - manage dispatcher\n" .
   	      "* Examples:  dispatcher addgw 1 sip:1.2.3.1:5050 1 'outbound gateway'\n" . 
              "*            dispatcher addgw 2 sip:1.2.3.4:5050 3 ''\n" .
   	      "*            dispatcher rmgw 4\n" .
 	      "dispatcher show ..................... show dispatcher gateways\n" .
 	      "dispatcher reload ................... reload dispatcher gateways\n" .
              "dispatcher dump ..................... show in memory dispatcher gateways\n" . 
              "dispatcher addgw <setid> <destination> <flags> <description>\n" .
                                "\t\t\t.......................... add gateway\n" . 
              "dispatcher rmgw <id> ................ delete gateway\n";
}


# dbtext don't support db_ops
sub usage_db_ops() {
	print " -- command 'db' - database operations\n" .
              "db exec <query> ..................... execute SQL query\n" .
              "db roexec <roquery> ................. execute read-only SQL query\n" .
              "db run <id> ......................... execute SQL query from \$id variable\n" .
              "db rorun <id> ....................... execute read-only SQL query from\n" . 
                                                     "\t\t\t\t\$id variable\n" .
              "db show <table> ..................... display table content\n";

}


# speeddial 
sub usage_speeddial() {
	print " -- command 'speeddial' - manage speed dials (short numbers)\n" .
	      "speeddial show <speeddial-id> ....... show speeddial details\n" .
	      "speeddial list <sip-id> ............. list speeddial for uri\n" .
	      "speeddial add <sip-id> <sd-id> <new-uri> [<desc>] ... \n" .
		 "\t\t........................... add a speedial (*)\n" .
              "speeddial rm <sip-id> <sd-id> ....... remove a speeddial (*)\n" .
	      "speeddial help ...................... help message\n" .
	               "\t\t- <speeddial-id>, <sd-id> must be an AoR (username\@domain)\n" .
	               "\t\t- <sip-id> must be an AoR (username\@domain)\n" .
	               "\t\t- <new-uri> must be a SIP AoR (sip:username\@domain)\n" .
	   	       "\t\t- <desc> a description for speeddial\n";
}


# avp 
sub usage_avp() {
	print " -- command 'avp' - manage AVPs\n" .
		 "avp list [-T table] [-u <sip-id|uuid>]\n" .
		    "\t[-a attribute] [-v value] [-t type] ... list AVPs\n" .
		 "avp add [-T table] <sip-id|uuid>\n" .
		     "\t<attribute> <type> <value> ............ add AVP (*)\n" .
		 "avp rm [-T table]  [-u <sip-id|uuid>]\n" .
		     "\t[-a attribute] [-v value] [-t type] ... remove AVP (*)\n" .
		 "avp help .................................. help message\n" .
		    "\t- -T - table name\n" .
		    "\t- -u - SIP id or unique id\n" .
		    "\t- -a - AVP name\n" .
		    "\t- -v - AVP value\n" .
		    "\t- -t - AVP name and type (0 (str:str), 1 (str:int),\n" .
				              "\t\t\t\t2 (int:str), 3 (int:int))\n" .
		    "\t\t- <sip-id> must be an AoR (username\@domain)\n" .
		    "\t\t- <uuid> must be a string but not AoR\n";

}


# alias_db 
sub usage_alias_db() {
	print " -- command 'alias_db' - manage database aliases\n" .
		"alias_db show <alias> .............. show alias details\n" .
		"alias_db list <sip-id> ............. list aliases for uri\n" .
		"alias_db add <alias> <sip-id> ...... add an alias (*)\n" .
		"alias_db rm <alias> ................ remove an alias (*)\n" .
		"alias_db help ...................... help message\n" .
		    "\t\t- <alias> must be an AoR (username\@domain)\n" .
		    "\t\t- <sip-id> must be an AoR (username\@domain)\n";
}


#domain
sub usage_domain() {
	print " -- command 'domain' - manage local domains\n" .
 	      "domain reload ....................... reload domains from disk\n" .
              "domain show ......................... show current domains in memory\n" .
              "domain showdb ....................... show domains in the database\n" .
              "domain add <domain> ................. add the domain to the database\n" .
              "domain rm <domain> .................. delete the domain from the database\n";

}



# fifo
sub usage_fifo() {
	print " -- command 'fifo'\n" . 
 	      "fifo ............................... send raw FIFO command\n";
}


sub usage_dialplan() {
	print " -- command 'dialplan' - manage dialplans\n" . 
	      "dialplan show <dpid> .............. show dialplan tables\n" .
	      "dialplan reload ................... reload dialplan tables\n" .
	      "dialplan addrule <dpid> <prio> <match_op> <match_exp>\n" .
 	      "\t\t\t<match_len> <subst_exp> <repl_exp> <attrs>\n" .
	      "\t\t\t\t\t.................... add a rule\n" .
              "dialplan rm ....................... removes the entire dialplan table\n" .
	      "dialplan rmdpid <dpid> ............ removes all the gived dpid entries\n" .
 	      "dialplan rmrule <dpid> <prio> ..... removes all the gived dpid/prio entries\n";
}

# determine host name, typically for use in printing UAC
# messages; we use today a simplistic but portable uname -n way --
# no domain name is displayed ; fifo_uac expands !! to host
# address only for optional header fields; uname output without
# domain is sufficient for informational header fields such as
# From
#

sub get_my_host() {
	
	if ( $SIP_DOMAIN eq "") {
		$SIP_DOMAIN = `uname -n`;		
		return $SIP_DOMAIN;
	} else {
		return $SIP_DOMAIN;
	}
}

# calculate name and domain of current user
sub set_user() {

	@OSIPS = split ("@",$_[0]);
	$OSIPSUSER = $OSIPS[0];
	$OSIPSDOMAIN = $OSIPS[1];
	#print "user:".$OSIPSUSER." domain:".$OSIPSDOMAIN."\n";

	if ( ! $OSIPSDOMAIN ) {
		$OSIPSDOMAIN = $SIP_DOMAIN;
		return;
	}

	if ( ! $OSIPSDOMAIN ) {
		print "domain unknown: use usernames with domain or set default domain in SIP_DOMAIN\n";	
		return;
	}
	return;
}


# check the parameter if it is a valid address of record (user@domain)
sub check_aor() {

	if ( $_[0] !~ /^$USERNAME_RE\@.*\..*/ ) {
		print "error: invalid AoR: " . $_[0] . "> /dev/stderr";
		$result = 1;
	} else {
		 $result = 0;
	}

}


# check the parameter if it is a valid address of record (user@domain)
sub is_aor() {

	if ( $_[0] !~ /^$USERNAME_RE\@.*\..*/ ) {
		$result = 1;
	} else {
		 $result = 0;
	}
}


# check the parameter if it is a valid SIP address of record (sip:user@domain)
sub check_sipaor() {

	if ( $_[0] !~ /sips?:$USERNAME_RE\@.*\..*/ ) {
		print "error: invalid SIP AoR: ". $_[0] . " > /dev/stderr";
		$result = 1;
	} else {
		$result = 0;
	}

}


# check the parameter if it is a valid SIP URI
# quite simplified now -- it captures just very basic
# errors
sub check_uri() {

	if ( $_[0] !~ /sips?:($USERNAME_RE\@)?.*\..*/) { 
		print "error: invalid SIP URI: " . $_[0] . " > /dev/stderr";
		$result = 1;
	} else {
		$result = 0;
	}

}


#sub print_status() {

#	if ( $_[0] !~ /^[1-6][0-9][0-9]/ ) { 
#		print $_[0];
#	} else {
#		print "200 OK\n";
#	}

#}


# params: user, realm, password
# output: HA1
sub gen_ha1(){

	my @fields;
	@fields = split(":",@_);
	$HA1 = $fields[0];
	return;
}


# params: user, realm, password
# output: HA1B
sub gen_ha1b() {

	my @fields;
	@fields = split("@",@_);
	$HA1B = $fields[0];
	return;
}



# params: user, realm, password
# output: PHPLIB_ID
sub gen_phplib_id()
{
	my $NOW=`date`;
	my $PHPLIB_ID=`echo -n "$1$2:$3:$NOW" | $MD5 | $AWK '{ print $1 }'`;
}



# params: user, password
# output: HA1, HA1B
sub credentials()
{
	system(&set_user(@_));
	system(&gen_ha1 ( $OSIPSUSER, $OSIPSDOMAIN, $cmd[2] ));
	system(&gen_ha1b ( $OSIPSUSER, $OSIPSDOMAIN, $cmd[2] ));
	return;
}



# params: user
# output: false if exists, true otherwise
sub is_user() {

	system(&set_user($_[0]));
	print $OSIPSUSER ." " .$OSIPSDOMAIN."\n";

	#prepare the query	
	$sth = $dbh->prepare( "SELECT count(*) 
			       FROM $SUB_TABLE 
			       WHERE $sub_table{'SUBSCRIBER_COLUMN'} = \"$OSIPSUSER\" 
			       AND $sub_table{'REALM_COLUMN'} = \"$OSIPSDOMAIN\" " );
		
	#execute the query
	$sth->execute( );
	warn "Entry could not be retrieved from table", $sth->errstr( ), "\n" if $sth->err( );

	## Retrieve the results of a row of data and print
	print "\tQuery results:\n================================================\n";

	while ( @row = $sth->fetchrow_array( ) )  {
		 print "@row\n";
		 $result = "@row";

	}
	
	$sth->finish();	

	return $result;


}


#
##### ------------------------------------------------ #####
### helper functions (require db and/or ctl)
#

#sub lower() {
#	lc ($_[0]);
#	return;
#}


# params: table, column, value
# output: false if exists, true otherwise
sub is_value_in_db() {
	my $TABLE=$_[0];
	my $COL=$_[1];
	my $VALUE=$_[2];
	
	
	#prepare query
	$sth = $dbh->prepare( "SELECT count(*) FROM $TABLE WHERE $COL=\'$VALUE\'" );
	
	#execute the query
	$sth->execute( );
	warn "Retrieving data from table failed", $sth->errstr( ), "\n" if $sth->err( );	
	while ( @row = $sth->fetchrow_array( ) )  {
		    $result = "@row";
 		     print "@row\n";
	}	

	$sth->finish();

        if ($result == 0) {
		$response = 0;
	} else {
		$response = 1;
	}		


}

#params: none
# output: DBRWPW
#sub prompt_pw() {
#	if ( -z $DBRWPW ) {
#		my $savetty=`stty -g`
#		if ( -z "$1" ] ; then
#			printf "Password: " > /dev/stderr
#		else
#			printf "$1: " > /dev/stderr
#		fi
#		stty -echo
#   	read DBRWPW
#		stty $savetty
#   	echo
#	}
#}


	if ( $DBENGINE eq " " ) {
		print "database engine not specified, please setup one in the config script";
		$DBENGINELOADED = 0;
	} else {
	
		switch ($DBENGINE) {
			case (/^(mysql)|(MYSQL)/) {print "Used database is mysql\n";}
			case (/^oracle$/i) {print "Used database is oracle\n";}
			case (/^posgres$/i) {print "Used database is PosgreSQL\n";}
		}
		$DBENGINELOADED = 1;
	}


	# Connect to the database.
	$dbh = DBI->connect("DBI:$DBENGINE:database=$DBNAME;host=$DBHOST",
		                 "$DBROOTUSER", "",
				 {'PrintError' => 0} );



#
##### ------------------------------------------------ #####
### CTLENGINE
#

if ( $CTLENGINELOADED eq 1 ) {
	print "Control engine " . $CTLENGINE . " loaded\n";
} else {
	print "no control engine found - tried " . $CTLENGINE . "\n";
}


#
##### ------------------------------------------------ #####
### common functions
#


sub require_dbengine() {
	if ( $DBENGINELOADED eq 0 ){
		print "This command requires a database engine - none was loaded\n";
	}
	return;
}

sub require_ctlengine() {
	if ( $CTLENGINELOADED eq 0 ) {
		print "This command requires a control engine - none was loaded\n";
	}
	return;	
}




sub not_command(){
	print "Not an opensips command!\n";
	return;
}



my @history_list;
open(HIST,"</tmp/osipsconsole_history");
@history_list=<HIST>;
while ( $#history_list gt 0 ){	
	$result = shift(@history_list);
	chomp($result);	
	$term->addhistory($result);

}
close(HIST);
ET: while (1) {

	$attribs->{completion_entry_function} = $attribs->{list_completion_function};
	$attribs->{completion_word} = [@command_list];
	$command = $term->readline('OpenSIPS$:');



		if ( $command eq  "") {
			next ET;			
		} 

  	        @cmd = split(" ",$command);
		
		my $found=0;

		
		foreach my $i (@command_list){

			if ($cmd[0] eq $i) {
				$found=1;
			}

	        }
				
		if ($found == 1 ) {

			system(&cmd());

		} elsif ( ($found == 0) & ($cmd[0] =~ /^quit/) ) {
				#$dbh->disconnect();
				open(HIST,"+>/tmp/osipsconsole_history");
				print HIST @history_list; 
				close(HIST);
				print "Thank you for flying Opensips!!\n";
				exit;
	     	} elsif ( $found == 0 ) {
			 	system(&not_command());
		}		
			


	        $term->addhistory($cmd[0]);
		unshift(@history_list,"$command\n");

}


sub cmd() {
	switch ($cmd[0]) {		
		case (/^acl$/)	 				{ system(&opensips_acl()); }
		case (/^add$/)  				{ system(&subscriber()); }
		case (/^avp$/)	 				{ system(&avpops()); }	
		case (/^alias[(db)(_db)]$/)			{ system(&alias_db()); }
		case (/^cr$/) 					{ system(&opensips_cr()); }
		case (/^dialplan$/)                     	{ system(&opensips_dialplan()); }
		case (/^db$/)	 				{ system(&db_ops()); }
		case (/^dispatcher$/) 				{ system(&opensips_dispatcher()); }
		case (/^domain$/) 				{ system(&domain()); }
		case (/^fifo$/) 				{ &fifo_cmd(); } 
		case (/^lcr$/) 					{ system(&opensips_lcr()); } 
		case (/^(moni$)|(monitore$)|(con$)|(console$)/)	{ system(&fifo_opensips_monitor()); }
		case (/^ping$/)		 			{ system(&options_ping()); }
		case (/^passwd$/)		      		{ system(&subscriber()); }
		case (/^ps$/)					{ system(&opensips_ps()); }
		case (/^online$/)				{ &opensips_online(); }
		case (/^rpid$/)		 			{ system(&opensips_rpid()); }
		case (/^restart$/)		   		{ system(&opensips_restart()); }		
		case (/^rm$/)			      		{ system(&subscriber()); }
		case (/^speed[(dial)(_dial)]$/)			{ system(&speeddial()); }
		case (/^start$/)		    		{ system(&opensips_start()); }	
		case (/^stop$/)			      		{ system(&opensips_stop()); }
		case (/^tls$/)	 	  			{ system(&tls_ca()); }
		case (/^trusted$/)		 		{ system(&trusted()); }
		case (/^[(ul)(alias)(usrloc)]$/)	  	{ system(&opensips_usrloc()); }		
		case (/^version$/)				{ system(&opensips_version()); }
		else 						{ print " unknown command!!!\n"; }

			
	}
	return;

}




#all
##### ------------------------------------------------ #####
### opensips_start
#

sub opensips_start(){
	if ( ($#cmd+1) eq 1 ){
		print "\nStarting opensips........\n";
		if ( -r $PID_FILE ) {
				`ps axw | $EGREP opensips`;
				`ls -l $PID_FILE`;
				print "\nPID file exists ( " . $PID_FILE . " )! OpenSIPS already running?\n";
				return;
			}

		if ( ! -x $OSIPSBIN ) {
			print "\nOpenSIPS binaries not found at " . $OSIPSBIN . "\n";
			print "\nset OSIPSBIN to the path of opensips in " . $0 . " or ~/.opensipsctlrc\n";		        
			return;
		}

		if ( $SYSLOG == 1 ) {
			`$OSIPSBIN -P $PID_FILE $STARTOPTIONS 1>/dev/null 2>/dev/null`;
			return;
		} else {
			`$OSIPSBIN -f $PATH_ETC/opensips.cfg -P $PID_FILE -E $STARTOPTIONS`;	
			return;			
		}

		sleep 3;

		if ( -z $PID_FILE ) {
			print "\nPID file " . $PID_FILE . " does not exist -- OpenSIPS start failed\n";
			return;
		}

		print "\nstarted (pid: " . `cat $PID_FILE` . ")\n";

	} elsif ($cmd[1] =~ /h/){		
		&usage_base();		
	}else {
		print "No parameters required!!! Syntax is not correct\n";
	}
	return;

}

#
##### ------------------------------------------------ #####
### opensips_stop
#

sub opensips_stop(){
	if ( ($#cmd+1) eq 1 ){
		print "\nStopping OpenSIPS : \n";
		if ( -r $PID_FILE ) {
			my $sys = `cat $PID_FILE`;
			`kill $sys`;			
		        print "stopped\n";
			return;
		}
		else {               
	
		       print "\nNo PID file found ( " . $PID_FILE . " )! OpenSIPS probably not running\n";
		       print "check with 'ps axw | " . $EGREP . " opensips'\n";               
		       return;	
		}
	}elsif ($cmd[1] =~ /h/){		
		&usage_base();		
	}else {
		print "No parameters required!!! Syntax is not correct\n";
	}
	return;

}

#
##### ------------------------------------------------ #####
### opensips_restart
#

sub opensips_restart(){
	&opensips_stop();
	sleep 2;
	&opensips_start();			
}




#
##### ------------------------------------------------ #####
### oppensips_acl
#


sub opensips_acl() {

	if (!$#cmd gt 0) {
		print "Too few parameters\n";
		&usage_acl();
		return;
	} else {
		switch ($cmd[1]) {
			case (/^show$/) {
				
				if ( $#cmd eq 1 ) {
												
					$sth = $dbh->prepare ("SELECT * FROM $ACL_TABLE ");	

					##execute the query
					$sth->execute( );

			 		## Retrieve the results of a row of data and print
		 	                print "\tQuery results:\n================================================\n";
					while (@row = $sth->fetchrow_array( ) )  {
		     		              	print "@row\n";
			    	        }		 

					warn "Error retireving data from the database! ", $sth->errstr( ), "\n" if $sth->err( );

					$sth->finish(); 

	 				return;

				}					
				
				if ( $#cmd == 2 ) {			
							
					if (  &is_user($cmd[2]) == 0 ) {
							print "Non-existent user " . $cmd[2];						
							return;

	  				 } else {

						&set_user($cmd[2]);
						
						$sth = $dbh->prepare ("SELECT * 
								       FROM $ACL_TABLE
                                                                       WHERE $acl_table{'ACL_USER_COLUMN'}=\'$OSIPSUSER\'  
                                                                       AND $acl_table{'ACL_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\' ");	
				
						 ##execute the query
						 $sth->execute( );

			 			 ## Retrieve the results of a row of data and print
						 print "\tQuery results:\n================================================\n";
					         while (@row = $sth->fetchrow_array( ) )  {
		     		                 	print "@row\n";
			    	                 }		 
						 warn "Error retireving data from the database! ", $sth->errstr( ), "\n" if $sth->err( );
						 $sth->finish(); }

				} else {
					&usage_acl();
					return;
				}
			}
			case (/^grant$/) {
				if ( $#cmd lt 3 ) {
					&usage_acl();
					return;
				}

				my $acl_inserted = 0;
				&is_user($cmd[2]); 
				if ( $#cmd == 3 ) {
					
					if (  &is_user($cmd[2]) == 0 ) {  
						print "Non-existent user " . $cmd[2] . " Still proceeding? [Y|N]:";
						if ( ( $input = <STDIN>) =~ /[y|Y]/  ) {
							print "Proceeding with non-local user\n";
						} else {
							return;
						}
					}
					&set_user($cmd[2]);			

					if ( $VERIFY_ACL == 1 ) {
						my $found = 0;
						foreach my $i (@ACL_GROUPS) {
							if ( $cmd[3] eq $i ) {
								$found = 1;					
							}
						 }
						if ( $found == 0 ) {
							print "Invalid privilege: acl " . $cmd[3] . " ignored\n";
							return;
						 }
				      }


					my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
					my $date = join("-",$year+1900,$mon+1,$mday+1);
					my $time = join("-",$hour,$min,$sec);
					my $last_modified =  join(" ",$date,$time);

					$sth = $dbh->prepare ("INSERT INTO $ACL_TABLE ($acl_table{'ACL_USER_COLUMN'},$acl_table{'ACL_GROUP_COLUMN'},
							       $acl_table{'ACL_MODIFIED_COLUMN'},$acl_table{'ACL_DOMAIN_COLUMN'} ) 
							       VALUES (\"$OSIPSUSER\",\"$cmd[3]\",\'$last_modified\', \"$OSIPSDOMAIN\" ) " );	
		
					 ##execute the query
					 $sth->execute( );
	 
					 print "Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );

					 $sth->finish();
		
					 
					if ( &is_user($cmd[2]) == 0 ) { 
						print "acl - SQL Error\n";
						return;
					}
					$acl_inserted = 1;
					
				}

				if ( $acl_inserted == 1 ) {
					$sth = $dbh->prepare ("SELECT * FROM $ACL_TABLE 
							       WHERE $acl_table{'ACL_USER_COLUMN'}=\'$OSIPSUSER\' 
							       AND $acl_table{'ACL_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\' ");	
				
						 ##execute the query
						 $sth->execute( );

			 			 ## Retrieve the results of a row of data and print						 
		 	                         print "\tQuery results:\n================================================\n";
					         while (@row = $sth->fetchrow_array( ) )  {
		     		                 	print "@row\n";
			    	                 }		 
						 warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
						 $sth->finish(); 
	
				}

			}
			case (/^revoke$/) {
				 if ( $#cmd == 2 ) {
					&set_user($cmd[2]);
					$sth = $dbh->prepare ("DELETE FROM $ACL_TABLE 
						               WHERE $acl_table{'ACL_USER_COLUMN'}=\'$OSIPSUSER\' 
							       AND $acl_table{'ACL_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'");	
				
					 ##execute the query
					 $sth->execute( );

		 			 ## Retrieve the results of a row of data and print
					 warn "Could not delete entry! ", $sth->errstr( ), "\n" if $sth->err( );
					 $sth->finish(); 
				} elsif ( $#cmd == 3 ) {
					 $sth = $dbh->prepare ("DELETE FROM $ACL_TABLE 
								WHERE $acl_table{'ACL_USER_COLUMN'}=\'$OSIPSUSER\' 
								AND $acl_table{'ACL_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\' 
								AND $acl_table{'ACL_GROUP_COLUMN'}=\'$cmd[3]\'");	
				
					 ##execute the query
					 $sth->execute( );

		 			 ## Retrieve the results of a row of data and print
					 warn "Could not delete entry! ", $sth->errstr( ), "\n" if $sth->err( );
					 $sth->finish(); 

				} else {
					print "acl - wrong number of parameters\n";
					&usage_acl();
					return;
				}			
			
			}
			case (/^h$/) {
				&usage_acl();
			}

			else {

				print "acl -unknown command $cmd[1]\n";

			}

		}
	
	}
	return;
}


#
##### ------------------------------------------------ #####
### opensips_rpid
#
sub opensips_rpid() {

	if ( $#cmd lt 1 ) {
		print "rpid - too few parameters\n";	
		&usage_rpid();
		return;
	} 
		switch ( $cmd[1] ) {
			case /^h/ {
				&usage_rpid();
				return;
			}

			case (/^add$/) {				 
				 if ( $#cmd lt 3 ) {
					print "Too few arguments!";
				 } else {
					
					&set_user($cmd[2]);
					&is_user($cmd[2]);
				 	$sth = $dbh->prepare("UPDATE $SUB_TABLE 
							      SET $sub_table{'RPID_COLUMN'} = $cmd[3] 
							      WHERE $sub_table{'SUBSCRIBER_COLUMN'}=\"$OSIPSUSER\" 
							      AND  $sub_table{'REALM_COLUMN'}= \"$OSIPSDOMAIN\" " );	

					 ##execute the query
					 $sth->execute( );
					 
					 warn "Entry was not updated in database!", $sth->errstr( ), "\n" if $sth->err( );
					 $sth->finish();
				 }
			}
 
			case (/^rm$/) {
				  if ( $#cmd lt 2 ) {
					print "Too few arguments!";
				 } else {
					
					&set_user($cmd[2]);
					&is_user($cmd[2]);

				 	$sth = $dbh->prepare("UPDATE $SUB_TABLE 
							      SET rpid = null  
   							      WHERE $sub_table{'SUBSCRIBER_COLUMN'} = \"$OSIPSUSER\" 
                                                              AND $sub_table{'REALM_COLUMN'} = \"$OSIPSDOMAIN\" " );	

					 ##execute the query
					 $sth->execute( );

					 warn "Entry was not updated in database!", $sth->errstr( ), "\n" if $sth->err( );
					 $sth->finish();
				 }
			} 
			case (/^show$/) {
				 if ($#cmd lt 2){
					print "Too few parameters!\n";
					return;
				 } else{
					if ( &is_user($cmd[2]) != 0 ) {
					 	return;
				 	} else {
						print "rpid - invalid user " . $cmd[2] . "\n";
						return	;				 
					}
				 }
				 
			} 

			else {

				print "rpid -unknown command $cmd[1]\n";

			}

		}
}


#
##### ------------------------------------------------ #####
### opensips_lcr
#
sub opensips_lcr(){
	my $var;
	if ( $#cmd lt 1 ) {
		print "Too few parameters!\n";
		&usage_lcr();
		return;
	}

	switch ($cmd[1]) {

		case (/^show$/) {
			print "lcr routes\n";
			$sth = $dbh->prepare ( "SELECT * 
						FROM $LCR_TABLE 
						ORDER BY $lcr_table{'LCR_PREFIX_COLUMN'} ");	
				
			 ##execute the query
			 $sth->execute( );
 			 
			 ## Retrieve the results of a row of data and print
			 print "\tQuery results:\n================================================\n";

		         while (@row = $sth->fetchrow_array( ) )  {
     		                 	print "@row\n";
    	                 }		 
			 warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
			 $sth->finish(); 
			
			 #retrieve lcr gateways	
			 print "lcr gateways\n";
			 
			 $sth = $dbh->prepare ( "SELECT $gw_table{'LCR_GW_GWNAME_COLUMN'}, $gw_table{'LCR_GW_IP_COLUMN'},$gw_table{'LCR_GW_PORT_COLUMN'}, 							 $gw_table{'LCR_GW_URIS_COLUMN'}, $gw_table{'LCR_GW_PROTO_COLUMN'},$gw_table{'LCR_GW_GRPID_COLUMN'}, 							 $gw_table{'LCR_GW_STRIP_COLUMN'}, $gw_table{'LCR_GW_TAG_COLUMN'},$gw_table{'LCR_GW_FLAGS_COLUMN'} 
						 FROM $GW_TABLE 
						 ORDER BY $gw_table{'LCR_GW_GRPID_COLUMN'}");	
				
			 ##execute the query
			 $sth->execute( );

 			 ## Retrieve the results of a row of data and print						 
                         print "\tQuery results:\n================================================\n";

		         while (@row = $sth->fetchrow_array( ) )  {
     		                 	print "@row\n";
    	                 }		 
			 warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
			 $sth->finish(); 


			
		}

		case (/^reload$/) {
			$var = &fifo_cmd("lcr_reload");
			print $var;
			
		}
	
		case (/^addroute$/) {
			if ( $#cmd lt 5 ) {
				print "lcr - too few parameters\n";
				&usage_lcr();
				return;
			}
	
			$sth = $dbh->prepare (
			"INSERT INTO $LCR_TABLE 
			 ($lcr_table{'LCR_PREFIX_COLUMN'}, $lcr_table{'LCR_FROMURI_COLUMN'}, $lcr_table{'LCR_GRPID_COLUMN'}, $lcr_table{'LCR_PRIO_COLUMN'}) 				 VALUES (" . $cmd[2] . "," . $cmd[3] . "," . $cmd[4] . "," . $cmd[4] . ")" );	
 
			 ##execute the query
			 $sth->execute( );

	 		 print "Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );

			 $sth->finish();
		
			
			$var = &fifo_cmd('lcr_reload');
			print $var;
		}
		

		case (/^rmroute$/){
			if ( $#cmd lt 5 ) {
				print "too few parameters\n";
				&usage_lcr();
				return;
			}
	
			$sth = $dbh->prepare ("DELETE FROM $LCR_TABLE 
					       WHERE $lcr_table{'LCR_PREFIX_COLUMN'}=$cmd[2] 
					       AND $lcr_table{'LCR_FROMURI_COLUMN'}=$cmd[3] 
					       AND $lcr_table{'LCR_GRPID_COLUMN'}=$cmd[4] 
                                               AND $lcr_table{'LCR_PRIO_COLUMN'}=$cmd[5]");	
				
			##execute the query
			$sth->execute( );

		 	## Retrieve the results of a row of data and print
			warn "Could not delete entry!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 
			
			$var = &fifo_cmd('lcr_reload');
			print $var;
		}
		
		case (/^addgw$/) {
			my ($GW_FLAGS, $GW_TAG, $GW_STRIP, $STRIP, $GW_NAME, $GW_IP, $GW_PORT, $GW_URI_SCHEME, $GW_GRP_ID, $GW_TRANSPORT);
			
			if ( $#cmd lt 7 ) {
				print "Too few parameters!\n";
				&usage_lcr();
				return;
			}
			
			if ( $#cmd gt 7 ) {
				$GW_FLAGS = $cmd[8];
				if ( $#cmd gt 8 ) {
					$GW_TAG = $cmd[9];
				} else {
					$GW_TAG = "";
					$GW_STRIP = 0;
				}
				if ( $#cmd gt 9 ) {
					$STRIP = $cmd[10];
				} else {
					$STRIP = 0;
				}
				if ( $#cmd gt 10 ) {
					print "Too many parameters!\n";
					&usage_lcr();
					return;
				}
			} else {
				$GW_FLAGS = 0;
				$GW_TAG = "";
				$STRIP = 0;
			}
			
			$GW_NAME = $cmd[2];
			$GW_IP = $cmd[3];
			$GW_PORT = $cmd[4];
			$GW_URI_SCHEME = $cmd[5];
			if   ( $GW_URI_SCHEME =~ /^sip$/ ) {
				$GW_URI_SCHEME = 1;
			} elsif ( $GW_URI_SCHEME =~ /^sips$/ ) {
				$GW_URI_SCHEME = 2;
			}
			$GW_TRANSPORT = $cmd[6];
			if   ( $GW_TRANSPORT =~ /^udp$/ ) {
				$GW_TRANSPORT = 1;
			} elsif ( $GW_TRANSPORT =~ /^tcp$/ ) {
				$GW_TRANSPORT = 2;
			} elsif ( $GW_TRANSPORT =~ /^tls$/ ) {
				$GW_TRANSPORT = 3;
			}
			$GW_GRP_ID=$cmd[7];

			$sth = $dbh->prepare ("INSERT INTO $GW_TABLE ( $gw_table{'LCR_GW_GWNAME_COLUMN'}, $gw_table{'LCR_GW_GRPID_COLUMN'},$gw_table{'LCR_GW_IP_COLUMN'},$gw_table{'LCR_GW_PORT_COLUMN'},$gw_table{'LCR_GW_URIS_COLUMN'},$gw_table{'LCR_GW_PROTO_COLUMN'},$gw_table{'LCR_GW_STRIP_COLUMN'},$gw_table{'LCR_GW_TAG_COLUMN'},$gw_table{'LCR_GW_FLAGS_COLUMN'} ) VALUES (\'$GW_NAME\', $GW_GRP_ID,\'$GW_IP\', $GW_PORT, $GW_URI_SCHEME,	$GW_TRANSPORT, $STRIP, \'$GW_TAG\', $GW_FLAGS)" );	
 
			 ##execute the query
			 $sth->execute( );

	 		 print "Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );

			 $sth->finish();
		
			
			$var = &fifo_cmd('lcr_reload');
			print $var;
			
		}

		case (/^rmgw$/) {
			if ( $#cmd lt 2 ) {
				print "missing gateway to be removed\n";
				return;
			}

			$sth = $dbh->prepare ("DELETE FROM $GW_TABLE 
					       WHERE $gw_table{'LCR_GW_GWNAME_COLUMN'}=$cmd[2]");	
				
			##execute the query
			$sth->execute( );
		 	## Retrieve the results of a row of data and print
			
			warn "Could not delete entry!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 
			
			$var = &fifo_cmd('lcr_reload');
			print $var;
		}

		case (/^h$/) {
			print "Too few parameters\n";
			&usage_lcr;		
		}

		else {

			print "lcr -unknown command $cmd[1]\n";

		}


	}
}

#
##### ------------------------------------------------ #####
### subscriber - add|passwd|rm
#
sub subscriber() {
	if ( $#cmd lt 1 ) {
		print "too few parameters\n";
		&usage_subscriber();
		return;
	}
	switch ($cmd[0]) {

		case (/^add$/) {
			if  ($#cmd ne 2 ) {
				&usage_subscriber();
				return;
			}
			&credentials($cmd[1],$cmd[2]);
			
			if ( &is_user($cmd[1]) ne 0 ) {
				print "user " . $cmd[1] . " already exists\n";
				return;
			}

			&set_user($cmd[1]);
			&check_alias($OSIPSUSER,$OSIPSDOMAIN);
			if ( $ALIAS_EXISTS == 1 ) {
				print "user " . $cmd[1] . " already exists as alias\n";
				return;
			} else {
				print "Alias $cmd[1] does not exist!\n";
			}		

			#prepare the query
			$sth = $dbh->prepare( "INSERT INTO $SUB_TABLE 
					       ($sub_table{'SUBSCRIBER_COLUMN'},$sub_table{'REALM_COLUMN'},$sub_table{'HA1_COLUMN'},
						$sub_table{'HA1B_COLUMN'},$sub_table{'PASSWORD_COLUMN'} ) 
						VALUES (\"$OSIPSUSER\",\"$OSIPSDOMAIN	\",\"$HA1\",\"$HA1B\",\"$cmd[2]\") " );
	
			#execute the query
			$sth->execute( );

			warn "Introducing the new user " . $cmd[1] . " to subscriber table failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();
		}

		case (/^passwd$/) {
			if ( $#cmd lt 2 ) {
				&usage_subscriber();
				return;
			} elsif ($#cmd eq 2){


				if ( &is_user( $cmd[1]) == 0 ) {
					print "non-existent user: " . $cmd[1] . "\n";
					return;
				}

				system(&credentials( $cmd[1], $cmd[2] ));

				if ( $STORE_PLAINTEXT_PW == 1 ) {
					$PASS = $cmd[2];
				} else {
					$PASS = "";
				}
				$sth = $dbh->prepare( "UPDATE $SUB_TABLE 
						       SET $sub_table{'HA1_COLUMN'}=\'$HA1\',$sub_table{'HA1B_COLUMN'}=\'$HA1B\',
						       $sub_table{'PASSWORD_COLUMN'}=\'$PASS\'
						       WHERE $sub_table{'SUBSCRIBER_COLUMN'}=\'$OSIPSUSER\' 
                                                       AND $sub_table{'REALM_COLUMN'}=\'$OSIPSDOMAIN\'" );
	
				#execute the query
				$sth->execute( );

				warn "Changing the password for user: " . $cmd[1] . " in database failed", $sth->errstr( ), "\n" if $sth->err( );
			
				$sth->finish();
			}
 						
		}
		case (/^rm$/) {

			if ( $#cmd ne 1 ) {
				&usage_subscriber();
				return;
			}

			&require_ctlengine();
			

			if ( &is_user ( $cmd[1] ) == 0) {
				print "non-existent user $cmd[1]\n";
				return;
			}

			# begin with remove all user's privileges
			# ####################################################acl revoke $1  > /dev/null 2>&1

			# destroy db-aliases			
			$sth = $dbh->prepare("DELETE FROM $DA_TABLE 
					      WHERE $da_table{'DA_USER_COLUMN'}=\'$OSIPSUSER\' 
			                      AND $da_table{'DA_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'" );
			#execute the query
			$sth->execute( );			
			warn "Destroying db-aliases for: " . $cmd[1] . " in database failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();



			# destroy the user now
			$sth = $dbh->prepare("DELETE FROM $SUB_TABLE 
					      WHERE $sub_table{'SUBSCRIBER_COLUMN'}=\'$OSIPSUSER\'
 					      AND $sub_table{'REALM_COLUMN'}=\'$OSIPSDOMAIN\'" );
			#execute the query
			$sth->execute( );			

			warn "Destroying user " . $cmd[1] . " in subscriber table failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			# and also all his contacts			
			&fifo_cmd (join(" ","ul_rm",$USRLOC_TABLE, $OSIPSUSER."\@".$OSIPSDOMAIN));

		}

		else {

			print "unknown command $cmd[0]\n";

		}

	}
}



#
##### ------------------------------------------------ #####
### opensips_usrloc 
#

sub opensips_usrloc() {
	my $var;
	if ( $#cmd lt 1 ) {
		print "usrloc - too few parameters\n";
		&usage_usrloc();
		return;
	}
	&require_ctlengine();
	if  ( $cmd[0] eq "alias" ) {
		$USRLOC_TABLE=$ALS_TABLE;
		if ( -z $USRLOC_TABLE ) {
			$USRLOC_TABLE = 'aliases';
		}
		$CHECK_SUB = 1;
	} elsif  ( $cmd[0] eq "ul" ) {
		$USRLOC_TABLE = $UL_TABLE;
		if ( -z $USRLOC_TABLE ) {
			$USRLOC_TABLE = 'location';
		} 
		$CHECK_SUB = 0;
	} elsif ( $cmd[0] eq 'usrloc' ) {
		$USRLOC_TABLE= $UL_TABLE;
		if ( -z $USRLOC_TABLE ) {
			$USRLOC_TABLE = 'location';
		}
		$CHECK_SUB = 0;
	} else {
		print "usrloc - unknown subcommand " . $cmd[0];
		&usage_usrloc();
		return;
	}

	switch ($cmd[1]) {
		case (/^h$/) {
			&usage_usrloc();
			return;
		}
		case (/^show$/) {
			if (  $#cmd == 2){
				if ($cmd[2] eq "--brief"){
					$var = &fifo_cmd("ul_dump", "brief");
					print $var;
				} else {
					&set_user($cmd[2]);
					$var = &fifo_cmd(join(" ","ul_show_contact",$USRLOC_TABLE,$OSIPSUSER."\@".$OSIPSDOMAIN));
					print $var;
				}
			} elsif ( $#cmd == 1){
				$var = &fifo_cmd("ul_dump");			
				print $var;
			} else {
				print "wrong number of params";
				&usage_usrloc();
			}

		}

		case (/^add$/) {
			my ($UL_EXPIRES, $UL_FLAGS, $BR_FLAGS);
			if ( $#cmd == 2 ) {
				# expires 0 means persistent contact
				$UL_EXPIRES = 0;
				$UL_FLAGS = 0;
				$BR_FLAGS = 0
			}elsif ( $#cmd == 3 ) {
				$UL_EXPIRES = $cmd[3];
				$UL_FLAGS = 0;
				$BR_FLAGS = 0;
			}else {
				&usage_usrloc();
				return;
			}			
							
			if ( &check_uri($cmd[3]) != 0 ) {
				print "$cmd[3] is not a valid URI\n";
				return;
			}

			&set_user($cmd[2]);
			if ( $CHECK_SUB != 0 ) {
				if ( &is_user( $cmd[2] ) ne 0 ) {
					print "overlap of alias with an existing subscriber name\n";
					return;
				}
			}

			&check_alias($OSIPSUSER, $OSIPSDOMAIN);
			if ( $ALIAS_EXISTS == 1 ) {
				if ( $CHECK_SUB != 0 ) {
					print "alias already defined\n";
				} else {
					print "AOR is an alias\n";
				}
				return;
			}

			$var = &fifo_cmd( join("ul_add" ,$USRLOC_TABLE, $OSIPSUSER . "\@" . $OSIPSDOMAIN, $cmd[2],$UL_EXPIRES, "1.00", "0", $UL_FLAGS, $BR_FLAGS,$ALL_METHODS));
			print $var;
		}

		case (/^rm$/) {
			if ( $#cmd == 2 ) {
				&set_user($cmd[2]);
				$var = &fifo_cmd (join(" ","ul_rm",$USRLOC_TABLE, $OSIPSUSER."\@".$OSIPSDOMAIN));
				print $var;

			 }elsif ( $#cmd == 3 ) {
				&set_user( $cmd[2] );		
				if ( &check_uri($cmd[3]) != 0 ) {
					print $cmd[3] . "is not a valid SIP URI (sip:[user\@]domain)";
					return;
				}

				$var = &fifo_cmd(join(" ","ul_rm_contact", $USRLOC_TABLE, $OSIPSUSER . "\@" . $OSIPSDOMAIN,$cmd[3]));
				print $var;

			} else {
				print "wrong number of params\n";
				&usage_usrloc();
				return;
			}
			
		}

		else {

			print "usrloc|ul|alias -unknown command $cmd[1]\n";

		}
	
	}


}


#
##### ------------------------------------------------ #####
### options_ping 
#
sub options_ping() {
	if ( $#cmd lt 1 ) {
		print "Too few parameters";
		&usage_ping();
		return;
	}

	my $myhost = &get_my_host();
	&require_ctlengine();
	my $temp = &fifo_cmd(join(" ","t_uac_dlg", "OPTIONS", "$cmd[1]", ".", ".","\"From:daemon\@$myhost\r\nTo:<$cmd[1]>\r\nContact:daemon\@$myhost\""));		
	print $temp;	
	return;	
}



#
##### ------------------------------------------------ #####
### domain 
#
sub domain() {
	my $var;
	if ( $#cmd lt 1 ) {
		print "Too few parameters!\n";
		&usage_domain();
		return;
	} elsif ( $#cmd gt 2 ) {
		print "Too many parameters!\n";
		&usage_domain();
		return;
	}	

	
	switch ( $cmd[1] ) {
		case (/^reload$/) {

			if ( $#cmd gt 1 ) {
				print "Too many parameters\n!";
				&usage_domain();
				return;
			}
						
			&require_ctlengine();
			$var = &fifo_cmd('domain_reload');
			print $var;

		}
		
		case (/^show$/) {

			if ( $#cmd gt 1 ) {
				print "Too many parameters\n!";
				&usage_domain();
				return;
			}
			
			&require_ctlengine();
			$var = &fifo_cmd('domain_dump');
			print $var;

		}
		
		case (/showdb$/) {
			if ( $#cmd gt 1 ) {
				print "Too many parameters\n!";
				&usage_domain();
				return;
			}

			&require_dbengine();
			$sth = $dbh->prepare ( "select * FROM $DOMAIN_TABLE");	
				
			##execute the query
			$sth->execute( );

			## Retrieve the results of a row of data and print						 
			print "\tQuery results:\n================================================\n";

			while (@row = $sth->fetchrow_array( ) )  {
				print "@row\n";
    	                 }		 
			warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 			

		}

		case (/^add$/) {
	
			if ( $#cmd lt 2 ) {
				print "Too few parameters\n!";
				&usage_domain();
				return;
			} elsif ( $#cmd gt 2 ) {
				print "Too many parameters\n";
				&usage_domain();
				return;
			}

			if ( &is_value_in_db($DOMAIN_TABLE, $domain_table{'DO_DOMAIN_COLUMN'},$cmd[2]) ) {
				print $cmd[2] . " is already in $DOMAIN_TABLE table\n";
				return;
			}	

			my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
			my $date = join("-",$year+1900,$mon+1,$mday+1);
			my $time = join("-",$hour,$min,$sec);
			my $last_modified =  join(" ",$date,$time);
			
			$sth = $dbh->prepare( "INSERT INTO $DOMAIN_TABLE 
					       ($domain_table{'DO_DOMAIN_COLUMN'}, $domain_table{'DO_LAST_MODIFIED_COLUMN'}) 
					       VALUES (\'$cmd[2]\',\'$last_modified\') " );
	
			#execute the query
			$sth->execute( );

			warn "Introducing the new user " . $cmd[1] . " to the database failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();
			
		}
		
		case (/^rm$/) {	
			&require_dbengine();
			if ( $#cmd lt 2 ) {
				print "Too few parameters!\n";
				&usage_domain();
				return;
			} elsif ( $#cmd gt 2 ) {
				print "Too ma	ny parameters!\n";
				&usage_domain();
				return;
			}
		
			$sth = $dbh->prepare("DELETE FROM $DOMAIN_TABLE 
   					      WHERE domain='$cmd[2]'" );
			#execute the query
			$sth->execute( );			
			warn "Deleting domain " . $cmd[2] . " in table $DOMAIN_TABLE failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();
			
			print "execute 'domain reload' to synchronize cache and database\n";

		}
	
		case (/^h$/) {
			&usage_domain();
		}

		else {

			print "domain -unknown command $cmd[1]\n";

		}


	}
}



#
##### ------------------------------------------------ #####
### trusted 
#
sub trusted() {
	my $var;
	if ( $#cmd lt 1 ) {
		print "Too few parameters!\n";
		&usage_trusted();
		return;
	}	
	
	if ( $#cmd gt 5 ) {
		print "Too many parameters!\n";
		&usage_trusted();
		return;
	}	

	switch ($cmd[1]) {
		case (/^reload$/) {

			&require_ctlengine();
			$var = &fifo_cmd('trusted_reload');
			print $var;

		}
		
		case (/^dump$/) {
		
			&require_ctlengine();
			$var = &fifo_cmd('trusted_dump');
			print $var;

		}	

		case (/^show$/) {
		
			&require_dbengine();

			$sth = $dbh->prepare ( "SELECT * FROM $TRUSTED_TABLE");	
				
			##execute the query
			$sth->execute( );

			## Retrieve the results of a row of data and print						 
			print "\tQuery results:\n================================================\n";

			while (@row = $sth->fetchrow_array( ) )  {
				print "@row\n";
    	                 }		 
			warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 
			
					
	
		}	

		case (/^add$/) {
			
			my $PATTERN;

			&require_dbengine();

			if ( $#cmd lt 5 ) {
				print "Too few parameters!\n";
				&usage_trusted();
				return;
			}


			if ( $#cmd gt 5 ) {
				print "Too many parameters!\n";
				&usage_trusted();
				return;
			}
	
			if ( &is_value_in_db( $TRUSTED_TABLE, $trusted_table{'TRUSTED_SRC_IP_COLUMN'}, $cmd[2] ) ) {
				print $cmd[2] . " already in $TRUSTED_TABLE table\n";
				return;
			}

			if ( $cmd[3] !~ /^any$|udp$|tcp$|tls$|sctp$|none$/ ) {
				print "unknown protocol\n";
				return;
			}
			
			if ( ! -z $cmd[4] ) {
				
				$PATTERN = $cmd[4];
						
			}
			
			$sth = $dbh->prepare( " INSERT INTO $TRUSTED_TABLE 
						( $trusted_table{'TRUSTED_SRC_IP_COLUMN'}, $trusted_table{'TRUSTED_PROTO_COLUMN'}, 
						$trusted_table{'TRUSTED_FROM_PATTERN_COLUMN'},$trusted_table{'TRUSTED_TAG_COLUMN'} ) 
						VALUES (\'$cmd[2]\', \'$cmd[3]\', \'$PATTERN\', \'$cmd[5]\') " );
	
			#execute the query
			$sth->execute( );

			warn "Introducing the new user " . $cmd[1] . " to the database failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();
			
			print "execute 'trusted reload' to synchronize cache and database\n";
	
		}

		case (/^rm$/) {

			&require_dbengine();
			if ( $#cmd lt 2 ) {
				&usage_trusted();
				return;
			}
				
			$sth = $dbh->prepare("DELETE FROM $TRUSTED_TABLE 
					      WHERE $trusted_table{'TRUSTED_SRC_IP_COLUMN'} = \'$cmd[2]\'" );
			#execute the query
			$sth->execute( );			
			warn "Deleting domain " . $cmd[2] . " in table $DOMAIN_TABLE failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			print "execute 'trusted reload' to synchronize cache and database\n";
	
		}

		case (/^h$/) {
		
			&usage_trusted();
			
		}

		else {

			print "trusted -unknown command $cmd[1]\n";

		}

	}
}


#
##### ------------------------------------------------ #####
### DISPATCHER management
#
sub opensips_dispatcher() {
	my $var;
	if ( $#cmd lt 1 ) {
		print "Too few parameters!\n";
		&usage_dispatcher();
		return;
	} elsif ( $#cmd gt 5 ) {
		print "Too many parameters!\n";
		&usage_dispatcher();
		return;
	}	
	&require_dbengine();
	&require_ctlengine();
	
	switch ($cmd[1]) {
	
		case (/^show$/) {
	
			print "dispatcher gateways\n";
			
			$sth = $dbh->prepare ( "SELECT * 
						FROM $DISPATCHER_TABLE 
						ORDER BY $dispatcher_table{'DISPATCHER_SETID_COLUMN'}");	
				
			##execute the query
			$sth->execute( );

			## Retrieve the results of a row of data and print						 
			print "\tQuery results:\n================================================\n";

			while (@row = $sth->fetchrow_array( ) )  {
				print "@row\n";
    	                 }		 
			warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 		
	


		}	

		case (/^addgw$/) {

			my ( $DISPATCHER_DESCRIPTION, $DISPATCHER_SETID, $DISPATCHER_DESTINATION, $DISPATCHER_FLAGS);
	
			if ( $#cmd lt 5 ) {
				print "Too few parameters!\n";
				&usage_dispatcher();
				return;
			}

			if ( $#cmd gt 5 ) {
				print "Too many parameters!\n";
				&usage_dispatcher();
				return;
			}

			if ( $#cmd gt 3 ) {
				$DISPATCHER_DESCRIPTION = $cmd[5];
			} else {
				$DISPATCHER_DESCRIPTION = "";
			}

			$DISPATCHER_SETID = $cmd[2];
			$DISPATCHER_DESTINATION = $cmd[3];
			$DISPATCHER_FLAGS = $cmd[4];


			$sth = $dbh->prepare( " INSERT INTO $DISPATCHER_TABLE ( $dispatcher_table{'DISPATCHER_SETID_COLUMN'}, 
						$dispatcher_table{'DISPATCHER_DESTINATION_COLUMN'}, $dispatcher_table{'DISPATCHER_FLAGS_COLUMN'},
 						$dispatcher_table{'DISPATCHER_DESCRIPTION_COLUMN'} ) 
						VALUES ($DISPATCHER_SETID,\'$DISPATCHER_DESTINATION\',$DISPATCHER_FLAGS,\'$DISPATCHER_DESCRIPTION\') " );
	
			#execute the query
			$sth->execute( );

			warn "Introducing the new user " . $cmd[1] . " to the database failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			$var = &fifo_cmd('ds_reload');
			print $var;

		}	

		case (/^rmgw$/) {
	
			if ( $#cmd ne 2 ) {
				print "missing gateway id to be removed\n";
				return;
			}

			$sth = $dbh->prepare("DELETE FROM $DISPATCHER_TABLE 
					      WHERE $dispatcher_table{'DISPATCHER_ID_COLUMN'}=\'$cmd[2]\'" );
			#execute the query
			$sth->execute( );			
			warn "Deleting domain " . $cmd[2] . " in table $DOMAIN_TABLE failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			$var = &fifo_cmd('ds_reload');	
			print $var;

		}	

		case (/^reload$/) {
	
			$var = &fifo_cmd('ds_reload');						
			print $var;

		}	

		case (/^dump$/) {
	
			$var = &fifo_cmd('ds_list');
			print $var;
		}	

		case (/^h$/) {
	
			&usage_dispatcher();

		}	

		else {

			print "dispatcher - unknown command $cmd[1]\n";

		}


	} 

}


#
##### ------------------------------------------------ #####
### CARRIERROUTE management
#
sub opensips_cr() {
	my $var;
	if ( $#cmd lt 1 ) {
		print "Too few parameters!\n";
		&usage_cr();
		return;
	} 

	&require_dbengine();
	&require_ctlengine();

	switch ( $cmd[1] ) {
		
		case (/^show$/) {

			print "cr routing tree\n";

			$sth = $dbh->prepare ( "SELECT * 
						FROM $ROUTE_TREE_TABLE 
						ORDER BY $route_tree_table{'CARRIERROUTE_ROUTE_TREE_PREFIX_COLUMN'}");	
				
			##execute the query
			$sth->execute( );

			## Retrieve the results of a row of data and print						 
			print "\tQuery results:\n================================================\n";

			while (@row = $sth->fetchrow_array( ) )  {
				print "@row\n";
    	                 }		 
			warn "Could not retrieve data!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 	

			print "cr routes\n";

			$sth = $dbh->prepare ( " SELECT * 
						 FROM $CARRIERROUTE_TABLE ORDER BY $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_CARRIER_COLUMN'},
						 $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_SCAN_PREFIX_COLUMN'}, 
						 $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_DOMAIN_COLUMN'},
						 $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_PROB_COLUMN'} ");	
				
			##execute the query
			$sth->execute( );

			## Retrieve the results of a row of data and print						 
			print "\tQuery results:\n================================================\n";

			while (@row = $sth->fetchrow_array( ) )  {
				print "@row\n";
    	                 }		 
			warn "Could not retrieve data! Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish(); 	

		}

		case (/^reload$/) {

			$var = &fifo_cmd('cr_reload_routes');
			print $var;
		
		}

		case (/^dump$/) {

			$var = &fifo_cmd('cr_dump');
			print $var;
		
		}

		case (/^addrt$/) {

			if ( $#cmd lt 3 ) {
				print "cr - missing route_tree\n";
				&usage_cr();
				return;
			}
	
			$sth = $dbh->prepare( " INSERT INTO $ROUTE_TREE_TABLE 
						( $route_tree_table{'CARRIERROUTE_ROUTE_TREE_PREFIX_COLUMN'}, 
						$route_tree_table{'CARRIERROUTE_ROUTE_TREE_CARRIER_COLUMN'}) 
						VALUES ($cmd[2], \'$cmd[3]\') " );
	
			#execute the query
			$sth->execute( );

			warn "Introducing the new route tree prefix and route tree carrier to the database failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			print "execute 'cr reload' to synchronize cache and database"

		
		}

		case (/^rmrt$/) {

			if ( $#cmd lt 2 ) {
				print "cr - missing route_tree to be removed\n";
				&usage_cr();
				return;
			}

			$sth = $dbh->prepare("DELETE FROM $ROUTE_TREE_TABLE 
					      WHERE $route_tree_table{'CARRIERROUTE_ROUTE_TREE_CARRIER_COLUMN'}=\'$cmd[2]\'" );
			#execute the query
			$sth->execute( );			
			warn "Deleting route tree " . $cmd[2] . " in table $ROUTE_TREE_TABLE failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();
	
			print "execute 'cr reload' to synchronize cache and database"
		
		}

		case (/^addcarrier$/) {

			my ($CARRIER, $SCAN_PREFIX, $DOMAIN, $REWRITE_HOST, $PROB, $STRIP, $REWRITE_PREFIX, $REWRITE_SUFFIX, $COMMENT, $FLAGS, $MASK);

			if ( $#cmd lt 5 ) {
				print "cr - too few parameters\n";
				&usage_cr();
				return;
			}
		

			if ( $#cmd gt 5 ) {
				$PROB = $cmd[6];
				if ( $#cmd gt 6 ) {
					$STRIP = $cmd[7];
					if ( $#cmd gt 7 ) {
						$REWRITE_PREFIX = $cmd[8];
						if ( $#cmd gt 8 ) {
							$REWRITE_SUFFIX = $cmd[9];
							if ( $#cmd gt 9 ) {
								$COMMENT = $cmd[10];
								if ( $#cmd gt 10 ) {
									$FLAGS = $cmd[11];
									if ( $#cmd gt 11 ) {
										$MASK = $cmd[12];
									} else {
										$MASK = 0;
									}
								} else {
									$FLAGS = 0;
									$MASK = 0;
								}
							} else {
								$COMMENT = 'NULL';
								$FLAGS = 0;
								$MASK = 0;
							}
						} else {
							$REWRITE_SUFFIX = 'NULL';
							$COMMENT = 'NULL';
							$FLAGS = 0;
							$MASK = 0;
						}
					} else {
						$REWRITE_PREFIX = 'NULL';
						$REWRITE_SUFFIX = 'NULL';
						$COMMENT = 'NULL';
						$FLAGS = 0;
						$MASK = 0;
					}
				} else {
					$STRIP = 0;
					$REWRITE_PREFIX = 'NULL';
					$REWRITE_SUFFIX = 'NULL';
					$COMMENT = 'NULL';
					$FLAGS = 0;
					$MASK = 0;

				}
			} else {		
				$PROB = 0;
				$STRIP = 0;
				$REWRITE_PREFIX = 'NULL';
				$REWRITE_SUFFIX = 'NULL';
				$COMMENT = 'NULL';
				$FLAGS = 0;
				$MASK = 0;

			}		


			$CARRIER = $cmd[2];
			$SCAN_PREFIX = $cmd[3];
			$DOMAIN = $cmd[4];
			$REWRITE_HOST = $cmd[5];
			
			$sth = $dbh->prepare( " INSERT INTO $CARRIERROUTE_TABLE ( $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_CARRIER_COLUMN'},$carrierroute_table{'CARRIERROUTE_CARRIERROUTE_SCAN_PREFIX_COLUMN'},$carrierroute_table{'CARRIERROUTE_CARRIERROUTE_DOMAIN_COLUMN'},$carrierroute_table{'CARRIERROUTE_CARRIERROUTE_PROB_COLUMN'}, $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_STRIP_COLUMN'},$carrierroute_table{'CARRIERROUTE_CARRIERROUTE_REWRITE_HOST_COLUMN'}, $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_REWRITE_PREFIX_COLUMN'}, $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_REWRITE_SUFFIX_COLUMN'},$carrierroute_table{'CARRIERROUTE_CARRIERROUTE_COMMENT_COLUMN'},$carrierroute_table{'CARRIERROUTE_CARRIERROUTE_FLAGS_COLUMN'}, $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_MASK_COLUMN'}) VALUES ($CARRIER, \'$SCAN_PREFIX\', \'$DOMAIN\', $PROB, $STRIP, \'$REWRITE_HOST\', \'$REWRITE_PREFIX\', \'$REWRITE_SUFFIX\', \'$COMMENT\', $FLAGS, $MASK)" );
	
			#execute the query
			$sth->execute( );

			warn "Introducing the new route tree prefix and route tree carrier to the database failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			print "execute 'cr reload' to synchronize cache and database\n";

		
		}

		case (/^rmcarrier$/) {

			if ( $#cmd lt 4 ) {
				print "cr - too few parameters\n";
				&usage_cr();
				return;
			}

			$sth = $dbh->prepare("DELETE FROM $CARRIERROUTE_TABLE 
					      WHERE $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_CARRIER_COLUMN'}=\'$cmd[2]\' 
					      AND $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_SCAN_PREFIX_COLUMN'}=\'$cmd[3]\' 
					      AND $carrierroute_table{'CARRIERROUTE_CARRIERROUTE_DOMAIN_COLUMN'}=\'$cmd[4]\' " );
			#execute the query
			$sth->execute( );			
			warn "Deleting carrier " . $cmd[2] . " in table $CARRIERROUTE_TABLE failed", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			print "execute 'cr reload' to synchronize cache and database\n";

		}

		case (/^h$/) {
	
			&usage_cr();			

		}

		else {

			print "cr - unknown command $cmd[1]\n";

		}

	}


}

#
##### ------------------------------------------------ #####
### alias management
#




#check alias
sub check_alias(){
	my $var;
	$OSIPSUSER = $_[0];
	$OSIPSDOMAIN = $_[1];
	$ALIAS_EXISTS = 0;
	$var = &fifo_cmd( join(" ","ul_show_contact", $ALS_TABLE, $OSIPSUSER."\@".$OSIPSDOMAIN) );
	print $var;	
	
	if ( $ENABLE_ALIASES == 1 ) {
		&check_ul_alias($OSIPSUSER,$OSIPSDOMAIN);
		if ( $ALIAS_UL_EXISTS == 0 ) {
			$ALIAS_EXISTS = 0;
		} else {
			$ALIAS_EXISTS = 1;
		}
	}
	if  ( $ENABLE_ALIASES == 2 ) {
		&check_db_alias();
		if ( $ALIAS_DB_EXISTS == 0 ) {
			$ALIAS_EXISTS = 0;
		} else {
			$ALIAS_EXISTS = 1;
		}
	}

}


sub check_db_alias() {
	&require_dbengine();

	$ALIAS_DB_EXISTS = 0;
	
	$sth = $dbh->prepare( "SELECT count(*) 
			       FROM $DA_TABLE 
			       WHERE $da_table{'DA_ALIAS_USER_COLUMN'}=\"$OSIPSUSER\" 
                               AND $da_table{'DA_ALIAS_DOMAIN_COLUMN'}=\"$OSIPSDOMAIN\"" );
	
	#execute the query
	$sth->execute( );

	warn "Retrieving user " . $cmd[1] . " from $DA_TABLE failed", $sth->errstr( ), "\n" if $sth->err( );
			

	#Retrieve the results of a row of data and print
	print "\tQuery results:\n================================================\n";
	while ( @row = $sth->fetchrow_array( ) )  {
 		     print "@row\n";
		     $result = "@row";	
	}
	$sth->finish();


	#print $result;
	if ( $result eq 0 ) {
		$ALIAS_DB_EXISTS = 0;
	} else {
		$ALIAS_DB_EXISTS = 1;
	}

}



#xxxxxxxxxxxxxxxxxxx
sub check_ul_alias() {
	&require_ctlengine();
	$ALIAS_UL_EXISTS = 0;
	my $temp = &fifo_cmd(join(" ","ul_show_contact", $ALS_TABLE, $_[0]."\@".$_[1]));

	if  ( $temp !~ /^404/ ) {
		if ( $temp =~ /^400/ ) {
			print "400; check if you use aliases in OpenSIPS\n";
			return;
		}

		if ( $temp =~ /^200/ ) {
			$ALIAS_UL_EXISTS = 1;
		}
		return;
	}
}



#
##### ------------------------------------------------ #####
### db_alias 
#
sub alias_db() {
	
	if ( $#cmd lt 1 ) {
		print "Too few parameters!";
		&usage_alias_db();
		return;
	}

	&require_dbengine();



	switch ($cmd[1]) {  
		case (/^h$/) {
			&usage_alias_db();
			return;
		}
		case (/^list$/) {
			if ( $#cmd eq 2 ) {
				# print aliases for user				
				if ( &check_aor ($cmd[2]) ne 0 ) {
					print "alias_db - <" .$cmd[2]."> is not a valid AoR (user\@domain)\n";
					return;
				}
				
				&set_user($cmd[2]);
				
				print "Dumping aliases for user=<".$cmd[2].">\n";
				
				$sth = $dbh->prepare( "SELECT CONCAT($da_table{'DA_ALIAS_USER_COLUMN'},\'@\',$da_table{'DA_ALIAS_DOMAIN_COLUMN'}) ALIAS 
 						       FROM $DA_TABLE 
						       WHERE $da_table{'DA_USER_COLUMN'}=\'$OSIPSUSER\' 
 						       AND $da_table{'DA_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'" );
	
				#execute the query
				$sth->execute( );
				warn "Concatenting user with domain failed", $sth->errstr( ), "\n" if $sth->err( );

				#Retrieve the results of a row of data and print
				print "\tQuery results:\n================================================\n";
				while ( @row = $sth->fetchrow_array( ) )  {
			 		     print "@row\n";
				}	
				$sth->finish();

			
			} elsif ( $#cmd eq 1 ) {
				print "Dumping all aliases may take long: do you want to proceed? [Y|N]:";
				if ( ( my $input = <STDIN>) =~ /[y|Y]/ ) { 
							print "Dumping all aliases...\n";
						    } else {
							return;
				} 
				
				#preparing query
 				$sth = $dbh->prepare( "SELECT $da_table{'DA_ALIAS_USER_COLUMN'}, $da_table{'DA_ALIAS_DOMAIN_COLUMN'},
						       $da_table{'DA_USER_COLUMN'}, $da_table{'DA_DOMAIN_COLUMN'} 
						       FROM $DA_TABLE" );
	
				#execute the query
				$sth->execute( );
				warn "Retrieving data from table failed", $sth->errstr( ), "\n" if $sth->err( );
	
				#Retrieve the results of a row of data and print
				print "\tQuery results:\n================================================\n";
				while ( @row = $sth->fetchrow_array( ) )  {
			 		     print "@row\n";
				}	
				$sth->finish();

		
			} else {
				print "alias_db - wrong number of params for command [list]\n";
				&usage_alias_db();
				return;
			}

		}

		case (/^show$/) {
			if ( $#cmd ne 2 ) {
				print "alias_db - wrong number of params for command [show]\n";
				&usage_alias_db();
				return;
			}			
			
			if ( &check_aor ($cmd[2]) ne 0 ) {
				print "alias_db -". $cmd[2]." is not a valid AoR (user\@domain)\n";
				return;
			}
			
			&set_user($cmd[2]);

			#prepare query			
		        $sth = $dbh->prepare( " SELECT CONCAT($da_table{'DA_USER_COLUMN'},\'@\',$da_table{'DA_DOMAIN_COLUMN'} ) AS SIP_ID FROM $DA_TABLE 							WHERE $da_table{'DA_ALIAS_USER_COLUMN'}=\'$OSIPSUSER\' 
						AND $da_table{'DA_ALIAS_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\' " );
	
			#execute the query
			$sth->execute( );
			warn "Retrieving data from table failed", $sth->errstr( ), "\n" if $sth->err( );			

			#Retrieve the results of a row of data and print
			print "\tQuery results:\n================================================\n";
			while ( @row = $sth->fetchrow_array( ) )  {
				     print "@row\n";
			}	
			$sth->finish();

		}

		case (/^add$/) {
			if ( $#cmd ne 3 ) {
				&usage_alias_db();
				return;
			}
			
			if ( &check_aor($cmd[2]) != 0 ) {
				print "alias_db - " . $cmd[1] ." is not a valid AoR (user\@domain)\n";
				return;
			}

			
			if ( &check_aor($cmd[3]) != 0 ) {
				print "alias_db - " . $cmd[2] ." is not a valid AoR (user\@domain)\n";
				return;
			}
			
			&set_user($cmd[2]);
			my $TMP_OSIPSUSER = $OSIPSUSER;
			my $TMP_OSIPSDOMAIN = $OSIPSDOMAIN;
			&set_user($cmd[3]);
			
			if ( &is_value_in_db( $DA_TABLE, $da_table{'DA_ALIAS_USER_COLUMN'}, $TMP_OSIPSUSER ) != 0 ) {
				print "$TMP_OSIPSUSER alias already in $DA_TABLE table\n";
				return;
			}


			#prepare query
			$sth = $dbh->prepare( " INSERT INTO $DA_TABLE 
						($da_table{'DA_USER_COLUMN'},$da_table{'DA_DOMAIN_COLUMN'},$da_table{'DA_ALIAS_USER_COLUMN'},
						$da_table{'DA_ALIAS_DOMAIN_COLUMN'}) 
						VALUES (\'$OSIPSUSER\',\'$OSIPSDOMAIN\',\'$TMP_OSIPSUSER\',\'$TMP_OSIPSDOMAIN\' )" );
	
			#execute the query
			$sth->execute();
			warn "Entry could not be inserted into table", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

							
		}
		
		case (/^rm$/) {
			if ( $#cmd != 2 ) {
				print "alias_db - wrong numbers of parameters\n";
				&usage_alias_db();
				return;
			}
			
						
			if ( &check_aor($cmd[2]) != 0 ) {
				print "alias_db - $cmd[1] is not a valid URI\n";
				return;
			}

			&set_user ( $cmd[2] );

			#prepare query
			$sth = $dbh->prepare( " DELETE FROM $DA_TABLE 
						WHERE $da_table{'DA_ALIAS_USER_COLUMN'}=\'$OSIPSUSER\' 
						AND $da_table{'DA_ALIAS_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'" );
	
			#execute the query
			$sth->execute( );
			warn "Deleting entry failed!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

		
		}	

		else {

			print "alias_db -unknown command $cmd[1]\n";

		}		
		
	}
} # end db-aliases



##### ----------------------------------------------- #####
### FIFO specific variables and functions
#
sub fifo_cmd() {

	my @fifo_cmd;
	
	if ($cmd[0] =~ /^fifo$/ ) {

		if ( $#cmd == 0 ) {
			print "Too few parameters!\n";
			&usage_fifo();
			return;
		}
 	 	if ($cmd[1] !~ /arg|debug|kill|list_blacklist|ps|pwd|uptime|version|which|get_statistics|reset_statistics|t_uac_dlg|t_uac_cancel|t_hash|t_reply|ul_rm|ul_rm_contact|ul_dump|ul_flush|ul_add|ul_show_contact/) {
			print "Fifo command is not valid. Should be in list: [arg|debug|kill|list_blacklist|ps|pwd|uptime|version|which|get_statistics|reset_statistics]\n";
			return;
		}		
		@fifo_cmd = @cmd;
		shift(@fifo_cmd);	
		
	}
	
	if ($_[0]) {	

		@fifo_cmd = split(" ",$_[0]);		
	}	


		
	
	my $arg_list = "";
	
	if ( $#fifo_cmd == 0){

		$cmd_fifo = ":" . $fifo_cmd[0] . ":" . $name . "\n";
	
	} elsif ( $#fifo_cmd  gt 0 ){

		for (my $i = 1; $i < $#fifo_cmd +1; $i++) {

			$arg_list = join("",$arg_list,$fifo_cmd[$i],"\n");


		}

		$cmd_fifo = ":" . $fifo_cmd[0] . ":" . $name . "\n" . $arg_list;

	}
	$cmd_fifo = join("",$cmd_fifo,"\n");

	&write_read_fifo($OSIPS_FIFO,$path,$cmd_fifo);

}


#monitor
sub fifo_opensips_monitor() {
	
		
		$cmd_fifo = ":version:$name\n\n";
		&write_read_fifo($OSIPS_FIFO,$path,$cmd_fifo);

		$cmd_fifo = ":uptime:$name\n\n";
		&write_read_fifo($OSIPS_FIFO,$path,$cmd_fifo);
		
		print "Transaction Statistics: ";
		&write_read_fifo($OSIPS_FIFO,$path,":get_statistics:$name\nUAS_transactions\nUAC_transactions\ninuse_transactions\n\n");
		
		print "Stateless Server Statistics: ";
		&write_read_fifo($OSIPS_FIFO,$path,":get_statistics:$name\nsent_replies\nsent_err_replies\nreceived_ACKs\n\n");
		
		print "UsrLoc Stats: ";
		&write_read_fifo($OSIPS_FIFO,$path,":get_statistics:$name\nusrloc:\n\n");

		return;
}


sub write_read_fifo() {

	$OSIPS_FIFO = $_[0];
	$path = $_[1];
	$cmd_fifo = $_[2];
	
	if (!-e $OSIPS_FIFO){

		print "File $OSIPS_FIFO does not exist!";

		return;

	}

	if ( !-w $OSIPS_FIFO ) {

		print "Error opening OpenSIPS's FIFO " . $OSIPS_FIFO . "\n" . 
		      "Make sure you have the line 'modparam(\"mi_fifo\", \"fifo_name\", \" " . $OSIPS_FIFO . "\")' in your config\n" .
		      "and also have loaded the mi_fifo module.\n";

		return;	

	}

	 unless ( -p $path ) {

		    unlink $path;

		    mkfifo ($path,666) or die "mkfifo $path failed: $!"; 

	 }
	
	`chmod a+rw $path`;

	open(ANS,">$OSIPS_FIFO") or die "Could not open $OSIPS_FIFO for writing: $!\n";

	print ANS $cmd_fifo;
	
	close (ANS);
	
	open(FIFO, "< $path") or die "Couldn't open $path for reading: $!\n";
	
	my @fifo_line = <FIFO>;

	shift(@fifo_line);
		
	close (FIFO);
	
	unlink $path;
		
	if ( ($cmd[0] !~ /^fifo$/) && ( $fifo_line[0] =~ /^\d+/) ){
		shift(@fifo_line);		
	} elsif ( $cmd[0] =~ /^fifo$/ ) {
		print "@fifo_line";
	} else {
		"@fifo_line";
	} 
		

}

#
##### ------------------------------------------------ #####
### tls_ca 
#
sub tls_ca() {
	my ( $CA_BASE, $CA_CONF, $CA_PATH );
	if ($#cmd lt 1) {
		print "Too few parameters!\n";
		&usage_tls();
		return;
	}
	
	switch ($cmd[1]) {
	
		case (/^rootCA$/) {
		

			if ( $#cmd == 1 ) {
				
				$CA_BASE = $ETCDIR . "/tls";		

			} else {

				$CA_BASE=`(cd $cmd[2];pwd)`;

			}			
			if ( ! -d $CA_BASE ) {
				print "Config directory ($CA_BASE) does not exist\n";
				return;
			}
		
			$CA_CONF='ca.conf';
			$CA_PATH=$CA_BASE."/rootCA";
	
			if ( ! -f $CA_BASE."/".$CA_CONF ) {
				print "root CA config file ($CA_BASE/$CA_CONF) does not exist\n";
				return;
			}

			if ( -d $CA_PATH ) {
				print "root CA directory ($CA_PATH) exists! Remove it (y/n)?";
				if ( (my $line = <STDIN>) !~ /y|Y/ ) {
					return;
				}
			}

			print "Creating directory $CA_PATH and its sub-tree\n";
			system("mkdir -p $CA_PATH");
			if ( $? != 0 ) {
				print "Failed to create root directory $CA_PATH\n";
				return;
			}
			`rm -fr $CA_PATH/*`;
			`mkdir $CA_PATH/private`;
			`mkdir $CA_PATH/certs`;
			`touch $CA_PATH/index.txt`;
			`echo 01 >$CA_PATH/serial`;

			print "Creating CA self-signed certificate\n";
			system(" cd $CA_PATH; openssl req -config $CA_BASE/$CA_CONF -x509 -newkey rsa:2048 -days 365 -out ./cacert.pem -outform PEM ");
			if ( $? != 0 ) {
				print "Failed to create self-signed certificate\n";
				return;
			}

			print "Protecting CA private key\n";
			system("chmod 600 $CA_PATH/private/cakey.pem");

			print "DONE\n";
			print "Private key can be found in $CA_PATH/private/cakey.pem\n";
			print "Certificate can be found in $CA_PATH/cacert.pem\n";


		}	

		case (/^userCERT$/) {

			if ( $#cmd lt 2 ) {
				print "Missing user name parameter\n";
				return;
			}

			if ( $#cmd lt 3 ) {
				# use default
				$CA_BASE = $ETCDIR."/tls";
			} else {
				$CA_BASE = `(cd $cmd[3];pwd)`;
			}

			if ( ! -d $CA_BASE ) {
				print "Config directory ($CA_BASE) does not exist\n";
				return;
			}

			my $USER_DIR = $CA_BASE."/".$cmd[2];
			my $USER_CFG = $CA_BASE."/".$cmd[2].".conf";
			my $USER = $cmd[2];
			my $REQ_CFG=$CA_BASE . "/request.conf";

			if ( ! -f $USER_CFG ) {
				print "User config file $USER_CFG not found\n";
				return;
			}

			if ( ! -f $REQ_CFG ) {
				print "Request config file $REQ_CFG not found\n";
				return;
			}

			print "Using config file $USER_CFG\n";

			if ( -d $USER_DIR ) {
				print "User CERT directory ($USER_DIR) exists! Remove it (y/n)?";
				if ( ( my $line = <STDIN>) =~ /y|Y/ ) {
					return;
				}
			}

			print "Creating directory $USER_DIR\n";
			system(mkdir -p $USER_DIR);
			if ( $? ne 0 ) {
				print "Failed to create user directory $USER_DIR\n";
				return;
			}
			`rm -fr $USER_DIR/*`;

			print "Creating user certificate request\n";
			`openssl req  -config $USER_CFG -out $USER_DIR/$USER-cert_req.pem -keyout $USER_DIR/$USER-privkey.pem -new -nodes`;
			if ( $? ne 0 ) {
				print "Failed to generate certificate request\n";
				return;
			}

			print "Signing certificate request\n";
			system(" cd $CA_BASE ; openssl ca -config $REQ_CFG -in $USER_DIR/$USER-cert_req.pem -out $USER_DIR/$USER-cert.pem ");
			if ( $? ne 0 ) {
				print  "Failed to generate certificate request\n";
				return;
			}

			print "Generating CA list\n";
			`cat $CA_BASE/rootCA/cacert.pem >> $USER_DIR/$USER-calist.pem`;

			print "DONE\n";
			print "Private key is locate at $USER_DIR/$USER-privkey.pem\n";
			print "Certificate is locate at $USER_DIR/$USER-cert.pem\n";
			print "CA-List is locate at $USER_DIR/$USER-calist.pem\n";

		}

		case (/^h$/) {

			&usage_tls();
		
		}

		else {

			print "tls -unknown command $cmd[1]\n";

		}

	}
}



#
##### ------------------------------------------------ #####
### AVP management
#
# avp list [-T table] [-u <sip-id|uuid>]
#     [-a attribute] [-v value] [-t type] ... list AVPs
# avp add [-T table] <sip-id|uuid>
#     <attribute> <type> <value> ............ add AVP (*)
# avp rm [-T table]  [-u <sip-id|uuid>]
#     [-a attribute] [-v value] [-t type] ... remove AVP (*)

sub avpops() {
	&require_dbengine();
	if ( $#cmd lt 1 ) {
		print "avp - too few parameters\n";
		&usage_avp();
		return;
	}	

	my $CLAUSE="";
	my $i;
	switch ($cmd[1]) {
	
		case (/^list$/) {
			$CLAUSE = "";
			if ($#cmd lt 3) {
				print "avp - too few parameters\n";
				&usage_avp();
				return;
			}	
			#shift(@cmd);					
			
			$i=2;
			while ( $i lt $#cmd  ){
				switch ($cmd[$i]) {
			
					case (/^-T$/) {												
						if ($cmd[1] =~ /(\s+)|-[Tuavt]/ ) {
							print "table name missing\n";							
							return;
						} else {
							$AVP_TABLE = $cmd[$i+1];						
						}					
					}	

					case (/^-u$/) {
			
						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp list - user id or uuid parameter missing or wrong (user\@domain)\n ";
							return;
						}
						
						if ( &is_aor($cmd[$i+1]) == 0 ) {
							&set_user($cmd[$i+1]);
							if ( $CLAUSE eq "" ) {
								$CLAUSE = " WHERE $avp_table{'AVP_USER_COLUMN'}=\'$OSIPSUSER\' AND $avp_table{'AVP_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'";
							} else {
								$CLAUSE = "$CLAUSE AND $avp_table{'AVP_USER_COLUMN'}=\'$OSIPSUSER\' AND $avp_table{'AVP_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'";
							}
						} else {
							if ( $CLAUSE eq "" ) {
								$CLAUSE = " WHERE $avp_table{'AVP_UUID_COLUMN'} = \'$cmd[$i+1]\'";
							} else {
								$CLAUSE = "$CLAUSE AND $avp_table{'AVP_UUID_COLUMN'}=\'$cmd[$i+1]\'";
							}
						}			

					}

					case (/^-a$/) {

						if ( $cmd[1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp list - attribute name parameter missing\n";
							return;
						}
						if ( $CLAUSE eq "" ) {
							$CLAUSE = " WHERE $avp_table{'AVP_ATTRIBUTE_COLUMN'}=\'$cmd[$i+1]\'";
						} else {
							$CLAUSE = "$CLAUSE AND $avp_table{'AVP_ATTRIBUTE_COLUMN'}=\'$cmd[$i+1]\'";
						}

					}

					case (/^-v$/) {

						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp list - value parameter missing\n";
							return;
						}
						if  ( $CLAUSE eq "" ) {
							$CLAUSE = " WHERE $avp_table{'AVP_VALUE_COLUMN'}=\'$cmd[$i+1]\'";
						} else {
							$CLAUSE = "$CLAUSE AND $avp_table{'AVP_VALUE_COLUMN'}=\'$cmd[$i+1]\'";
						}

					}

					case (/^-t$/) {

						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp list - type parameter missing\n";
							return;
						}
						if ( $CLAUSE eq "" ) {
							$CLAUSE = " WHERE $avp_table{'AVP_TYPE_COLUMN'}=\'$cmd[$i+1]\'";
						} else {
							$CLAUSE = "$CLAUSE AND $avp_table{'AVP_TYPE_COLUMN'}=\'$cmd[$i+1]\'";
						}				

					}
					
					else {
	
						print "avp list - unknown parameter $cmd[$i]\n";
					}

				}								
				$i+=2;
			}

			$sth = $dbh->prepare( "SELECT $avp_table{'AVP_UUID_COLUMN'},$avp_table{'AVP_USER_COLUMN'},$avp_table{'AVP_DOMAIN_COLUMN'},
					       $avp_table{'AVP_ATTRIBUTE_COLUMN'},$avp_table{'AVP_TYPE_COLUMN'},$avp_table{'AVP_VALUE_COLUMN'} 
 					       FROM $AVP_TABLE $CLAUSE" );
	
			#execute the query
			$sth->execute( );
			warn "Retrieving data from table failed", $sth->errstr( ), "\n" if $sth->err( );	
			while ( @row = $sth->fetchrow_array( ) )  {
				print "@row\n";
				$result = $#row+1;				    	
			}	
		
			if ( $result == 0 ) {
				print "No entry found having the corresponding attributes!\n";
			}
		
			
			$sth->finish();	



		}	

		case (/^add$/) {
		
			my $AVP_UUID="";

			if ( $#cmd != 7 ) {
				if ( $#cmd != 9 ) {
					print "avp add - bad number of parameters\n";
					return;
				}
			}
			if ( $#cmd eq 9 ) {
				if ( $cmd[2] =~ /-T/ ) {
					$AVP_TABLE=$cmd[3];
				} else {
					print "avp add - unknown parameter $cmd[2]\n";
					return;
				}
			}
			
			if ( &is_aor($cmd[4]) eq 0 ) {
				&set_user($cmd[4]);
			} else {
				$AVP_UUID = $cmd[4];
			}

			my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
			my $date = join("-",$year+1900,$mon+1,$mday+1);
			my $time = join(":",$hour,$min,$sec);
			my $last_modified =  join(" ",$date,$time);

			$sth = $dbh->prepare ("INSERT INTO $AVP_TABLE ($avp_table{'AVP_UUID_COLUMN'},$avp_table{'AVP_USER_COLUMN'},
					       $avp_table{'AVP_DOMAIN_COLUMN'},$avp_table{'AVP_ATTRIBUTE_COLUMN'}, $avp_table{'AVP_TYPE_COLUMN'},
 					       $avp_table{'AVP_VALUE_COLUMN'},$avp_table{'AVP_MODIFIED_COLUMN'}) 
					 VALUES (\'$AVP_UUID\',\'$OSIPSUSER\',\'$OSIPSDOMAIN\',\'$cmd[5]\',$cmd[6],\'$cmd[7]\',\'$last_modified\')" );	

			 ##execute the query
			 $sth->execute( );


	 		 warn "Data was not inserted in database!", $sth->errstr( ), "\n" if $sth->err( );

			 $sth->finish();
				
		
		}	

		case (/^rm$/) {
		
			$CLAUSE = "";
			if ($#cmd lt 3) {
				print "avp - too few parameters\n";
				&usage_avp();
				return;
			}	


			$i=2;
			while ( $i lt $#cmd ){
				switch ($cmd[$i]) {
	
					case ( /^-T$/ ) {						
						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ) {
							print "avp rm - table name parameter missing\n";							
							return;
						} else {
							$AVP_TABLE = $cmd[$i+1];
						}					
					}	

					case (/^-u$/) {
			
						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp rm - user id uuid or parameter missing\n";
							return;
						}
						
						if ( &is_aor($cmd[$i+1]) == 0 ) {
							&set_user($cmd[$i+1]);
							if ( $CLAUSE eq "" ) {
								$CLAUSE = " WHERE $avp_table{'AVP_USER_COLUMN'}=\'$OSIPSUSER\' AND $avp_table{'AVP_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'";
							} else {
								$CLAUSE = "$CLAUSE AND $avp_table{'AVP_USER_COLUMN'}=\'$OSIPSUSER\' AND $avp_table{'AVP_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'";
							}
						} else {
							if ( $CLAUSE eq "" ) {
								$CLAUSE = " WHERE $avp_table{'AVP_UUID_COLUMN'} = \'$cmd[$i+1]\'";
							} else {
								$CLAUSE = "$CLAUSE AND $avp_table{'AVP_UUID_COLUMN'}=\'$cmd[$i+1]\'";
							}
						}			

					}

					case (/^-a$/) {

						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp rm - attribute name parameter missing\n";
							return;
						}
						if ( $CLAUSE eq "" ) {
							$CLAUSE = " WHERE $avp_table{'AVP_ATTRIBUTE_COLUMN'}=\'$cmd[$i+1]\'";
						} else {
							$CLAUSE = "$CLAUSE AND $avp_table{'AVP_ATTRIBUTE_COLUMN'}=\'$cmd[$i+1]\'";
						}

					}

					case (/^-v$/) {

						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp rm - value parameter missing\n";
							return;
						}
						if  ( $CLAUSE eq "" ) {
							$CLAUSE = " WHERE $avp_table{'AVP_VALUE_COLUMN'}=\'$cmd[$i+1]\'";
						} else {
							$CLAUSE = "$CLAUSE AND $avp_table{'AVP_VALUE_COLUMN'}=\'$cmd[$i+1]\'";
						}

					}

					case (/^-t$/) {

						if ( $cmd[$i+1] =~ /(\s+)|-[Tuavt]/ ){
							print "avp rm - type parameter missing\n";
							return;
						}
						if ( $CLAUSE eq "" ) {
							$CLAUSE = " WHERE $avp_table{'AVP_TYPE_COLUMN'}=\'$cmd[$i+1]\'";
						} else {
							$CLAUSE = "$CLAUSE AND $avp_table{'AVP_TYPE_COLUMN'}=\'$cmd[$i+1]\'";
						}				

					}
					
					else {
	
						print "avp list - unknown parameter $cmd[2]\n";
					}

				}								
				$i+=2;
			}

			#prepare query
			$sth = $dbh->prepare( "DELETE FROM $AVP_TABLE $CLAUSE " );
	
			#execute the query
			$sth->execute( );
			warn "Deleting data from table failed", $sth->errstr( ), "\n" if $sth->err( );	
	       	        $sth->finish();
		
		}	

		case (/^(help$)|(h$)/) {

			&usage_avp();
	
		}

		else {

			print "avp -unknown command $cmd[1]\n";

		}
	}
}


#
##### ------------------------------------------------ #####
### DB operations
#
sub db_ops() {

	if ($#cmd lt 1) {
		print "Too few parameters\n";
		&usage_db_ops();
		return;
	}

	for(my $i=3; $i<=$#cmd; $i++){
		$cmd[2] = join(" ",$cmd[2],$cmd[$i]);
	}

	&require_dbengine();

	switch ($cmd[1]) {

		case (/^(exec$)|(query$)/) {
			if ( $#cmd lt 2 ) {
				print "missing query parameter\n";
				return;
			}			
			$sth = $dbh->prepare("$cmd[2]");

			#execute the query
			$sth->execute( );
			warn "Could not execute query", $sth->errstr( ), "\n" if $sth->err( );

			## Retrieve the results of a row of data and print
			print "\tQuery results:\n================================================\n";
			while ( @row = $sth->fetchrow_array( ) )  {
				 print "@row\n";				
			}	

	
			$sth->finish();	

		}

		case (/^(roexec$)|(roquery$)/) {
			if ( $#cmd lt 2 ) {
				print "missing query parameter\n";
				return;
			}
			
			$sth = $dbh->prepare( "$cmd[2]" );
		
			#execute the query
			$sth->execute( );
			warn "Could not execute query", $sth->errstr( ), "\n" if $sth->err( );

			## Retrieve the results of a row of data and print
			print "\tQuery results:\n================================================\n";

			while ( @row = $sth->fetchrow_array( ) )  {
				 print "@row\n";				
			}	

	
			$sth->finish();	

		}
		case (/^run$/) {
			
			if ( $#cmd lt 2 ) {
				print "missing query parameter\n";
				return;
			}
			print "`\$$cmd[2]`";
			system ("\$$cmd[2]");
			if ( $? ne 0 ) { 
				print "missing query value\n";
				return;
			}
			#$DBCMD "$QUERY"
		}
		case (/^rorun$/) {
			if ( $#cmd lt 2 ) {
				print "missing query parameter\n";
				return;
			}
			#eval QUERY=\$$1
			#if [ -z "$QUERY" ] ; then
			#	merr "missing query value"
			#	exit 1
			#fi
			#$DBROCMD "$QUERY"
		}
		case (/^show$/) {
			if ( $#cmd != 2 ) {
				print "missing table parameter\n";
				return;
			}

			$sth = $dbh->prepare( "SELECT * FROM $cmd[2]" );
		
			#execute the query
			$sth->execute( );
			warn "Entry could not be retrieved from table\n", $sth->errstr( ), "\n" if $sth->err( );
			## Retrieve the results of a row of data and print
			print "\tQuery results:\n================================================\n";

			while ( @row = $sth->fetchrow_array( ) )  {
				 print "@row\n";				
			}	

	
			$sth->finish();	

			
		}
		case (/^h$/) {
			&usage_db_ops();
		}
		else {
			print "db -unknown command $cmd[1]\n";
		}
	}
}



#
##### ------------------------------------------------ #####
### speeddial 
#
sub speeddial() {

	my $TMP_OSIPSUSER;
	my $TMP_OSIPSDOMAIN;	

	if ($#cmd lt 1) {
		print "Too few parameters!\n";
		&usage_speeddial();
		return;
	}
	
	&require_dbengine();
	
	switch ($cmd[1]) {

		case (/^list$/) {

			if ($#cmd == 2) {
				# print speed-dials for user
				if ( &check_aor($cmd[2]) != 0 ) {
					print "speeddial - <$cmd[2]> is not a valid AoR (user\@domain)\n";
					return;
				}
				
				&set_user($cmd[2]);
				
				print "Dumping speed-dials for user=<$cmd[2]>\n";
				
				$sth = $dbh->prepare("SELECT CONCAT($sd_table{'SD_SD_USER_COLUMN'},'\@',$sd_table{'SD_SD_DOMAIN_COLUMN'}) AS Short_number, $sd_table{'SD_NEW_URI_COLUMN'} AS New_URI,$sd_table{'SD_DESC_COLUMN'} FROM $SD_TABLE WHERE $sd_table{'SD_USER_COLUMN'}=\'$OSIPSUSER\' AND $sd_table{'SD_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'");
				#execute the query
				$sth->execute( );
				warn "Entry could not be retrieved from table\n", $sth->errstr( ), "\n" if $sth->err( );
				## Retrieve the results of a row of data and print
				print "\tQuery results:\n================================================\n";

				while ( @row = $sth->fetchrow_array( ) )  {
					 print "@row\n";				
				}	

	
				$sth->finish();	
			} elsif ($#cmd == 1) {
				print "Dumping all speed-dials may take long: do you want to proceed? [Y|N] ";
				if ((my $line = <STDIN>) eq "y|Y") {
					print "Dumping all speed-dials...\n";
				} else {
					return;
				}
				$sth = $dbh->prepare("SELECT CONCAT($sd_table{'SD_SD_USER_COLUMN'},'\@',$sd_table{'SD_SD_DOMAIN_COLUMN'}) AS Short_number, CONCAT($sd_table{'SD_USER_COLUMN'},'\@',$sd_table{'SD_DOMAIN_COLUMN'}) AS Owner, $sd_table{'SD_NEW_URI_COLUMN'} AS New_URI,$sd_table{'SD_DESC_COLUMN'} FROM $SD_TABLE");
				#execute the query
				$sth->execute( );
				warn "Entry could not be retrieved from table\n", $sth->errstr( ), "\n" if $sth->err( );
				## Retrieve the results of a row of data and print
				print "\tQuery results:\n================================================\n";

				while ( @row = $sth->fetchrow_array( ) )  {
					 print "@row\n";				
				}	

			} else {
				print "speeddial - wrong number of params for command [list]\n";
				&usage_speeddial();
				return;
			}		

		}	

		case (/^show$/) {

			if ( $#cmd lt 2 ) {
				print "speeddial - wrong number of params for command [show]\n";
				&usage_speeddial();
				return;
			}
			
			if (&check_aor($cmd[2]) != 0 ) {
				print "speeddial - $cmd[2] is not a valid AoR (user\@domain)\n";
				return;
			}
			
			&set_user($cmd[2]);
		
			$sth = $dbh->prepare("SELECT CONCAT($sd_table{'SD_USER_COLUMN'},'\@',$sd_table{'SD_DOMAIN_COLUMN'}) AS Owner, $sd_table{'SD_NEW_URI_COLUMN'} AS New_URI, $sd_table{'SD_DESC_COLUMN'} FROM $SD_TABLE WHERE $sd_table{'SD_SD_USER_COLUMN'}=\'$OSIPSUSER\' AND $sd_table{'SD_SD_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'");
			$sth->execute( );
			warn "Entry could not be retrieved from table\n", $sth->errstr( ), "\n" if $sth->err( );
			## Retrieve the results of a row of data and print
			print "\tQuery results:\n================================================\n";

			while ( @row = $sth->fetchrow_array( ) )  {
					 print "@row\n";				
			}	


		}	

		case (/^add$/) {

			if ( $#cmd != 4 ) {
				if ( $#cmd != 5 ) {
					print "speeddial - wrong number of parameters\n";
					&usage_speeddial();
					return;
				}
			}
			
			if ( &check_aor($cmd[2]) != 0 ) {
				print "speeddial - $cmd[2] is not a valid AoR (user\@domain)\n";
				return;
			}

			if ( &check_aor($cmd[3]) != 0 ) {
				print "speeddial - $cmd[2] is not a valid AoR (user\@domain)\n";
				return;
			}
			
			if ( &check_sipaor($cmd[4]) != 0 ) {
				print "speeddial - $cmd[4] is not a valid SIP AoR (sip:user\@domain)\n";
				return;
			}
			
			&set_user($cmd[2]);
			$TMP_OSIPSUSER = $OSIPSUSER;
			$TMP_OSIPSDOMAIN = $OSIPSDOMAIN;
			&set_user($cmd[3]);

			$sth = $dbh->prepare("INSERT INTO $SD_TABLE ($sd_table{'SD_USER_COLUMN'},$sd_table{'SD_DOMAIN_COLUMN'},$sd_table{'SD_SD_USER_COLUMN'},$sd_table{'SD_SD_DOMAIN_COLUMN'},$sd_table{'SD_NEW_URI_COLUMN'},$sd_table{'SD_DESC_COLUMN'}) VALUES (\'$TMP_OSIPSUSER\',\'$TMP_OSIPSDOMAIN\',\'$OSIPSUSER\',\'$OSIPSDOMAIN\',\'$cmd[4]\',\'$cmd[5]\')");

			#execute the query
			$sth->execute();
			warn "Entry could not be inserted into table", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

		

		}	

		case (/^rm$/) {
		
	
			if ( $#cmd != 3 ) {
				print "speeddial rm - invalid number of parameters\n";
				&usage_speeddial();
				return;
			}
			
			if ( &check_aor($cmd[2]) != 0 ) {
				print "speeddial - $cmd[2] not a valid AoR (user\@domain)\n";
				return;
			}
			
			if ( &check_aor($cmd[2]) != 0 ) {
				print "speeddial - $cmd[3] is not a valid AoR (user\@domain)\n";
				return;
			}

			&set_user($cmd[2]);
			$TMP_OSIPSUSER = $OSIPSUSER;
			$TMP_OSIPSDOMAIN = $OSIPSDOMAIN;
			&set_user($cmd[3]);

			$sth = $dbh->prepare("DELETE FROM $SD_TABLE WHERE $sd_table{'SD_USER_COLUMN'}=\'$TMP_OSIPSUSER\' AND $sd_table{'SD_DOMAIN_COLUMN'}=\'$TMP_OSIPSDOMAIN\' AND $sd_table{'SD_SD_USER_COLUMN'}=\'$OSIPSUSER\' AND $sd_table{'SD_SD_DOMAIN_COLUMN'}=\'$OSIPSDOMAIN\'");
	
			#execute the query
			$sth->execute( );
			warn "Deleting entry failed!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();
			
		}	

		case (/^(help$)|(h$)/) {

			&usage_speeddial();			

		}	

		else {
			print "speeddial -unknown command $cmd[1]\n";
		}


	}

}


sub opensips_ps(){
	my $var;
	&require_ctlengine();
	$var = &fifo_cmd("ps");
	print $var;
	return;
}

sub opensips_version() {
	my $var;
	&require_ctlengine();
	$var = &fifo_cmd("version");
	print $var;
	return;
}


sub opensips_online() {
	my $var;
	&require_ctlengine();
	$var  = &fifo_cmd("ul_dump");	
	if ($var =~ /aor/i) {
		`echo $var | awk '{print $2}' | sort | sort -mu`;
	}	
	
}

sub opensips_dialplan() {
	

	my $var;
	if ( $#cmd lt 1 ) {
		print "Too few parameters\n";
		&usage_dialplan();
		return;
	}
	
	switch ( $cmd[1] ) {
	
		case (/^show$/) {
			
			if ( $#cmd == 2 ) {
				print "dialplan $cmd[2] tables\n";
				$sth = $dbh->prepare( " SELECT * 
						 FROM $dialplan_table{'DIALPLAN_TABLE'} 
 						 WHERE $dialplan_table{'DIALPLAN_DPID_COLUMN'} = $cmd[2] 
						 ORDER BY $dialplan_table{'DIALPLAN_PR_COLUMN'} " );
				#execute query
				$sth->execute( );

				warn "Entry could not be retrieved from table\n", $sth->errstr( ), "\n" if $sth->err( );

				## Retrieve the results of a row of data and print
				print "\tQuery results:\n================================================\n";
				while ( @row = $sth->fetchrow_array( ) )  {
						 print "@row\n";				
				}	


			} else {
				print "dialplan tables\n";
				$sth = $dbh->prepare( " SELECT * 
							FROM $DIALPLAN_TABLE 
							ORDER BY $dialplan_table{'DIALPLAN_DPID_COLUMN'}, 
				$dialplan_table{'DIALPLAN_PR_COLUMN'} " );

				#execute query
				$sth->execute( );

				warn "Entry could not be retrieved from table\n", $sth->errstr( ), "\n" if $sth->err( );

				## Retrieve the results of a row of data and print
				print "\tQuery results:\n================================================\n";
				while ( @row = $sth->fetchrow_array( ) )  {
						 print "@row\n";				
				}	

			}			


		}

		case (/^reload$/) {

			$var = &fifo_cmd('dp_reload');
			print $var;		

		}

		case (/^addrule$/) {

			if ( $#cmd lt 9 ) {
				print "Too few parameters\n";
				&usage_dialplan();
				return;
			}

			my $DIALPLAN_DPID = $cmd[2];
			my $DIALPLAN_PR = $cmd[3];
			my $DIALPLAN_MATCH_OP = $cmd[4];

			switch ($DIALPLAN_MATCH_OP) {
				case (/^equal$/) {
					$DIALPLAN_MATCH_OP = 0;
				}
				case (/^regexp$/) {
					$DIALPLAN_MATCH_OP = 1;
				}
				else {
					print "dialplan - unexpected $DIALPLAN_MATCH_OP for operating matching. Use 'equal' or 'regexp'!";
					return;
				}
			}

			my $DIALPLAN_MATCH_EXP = $cmd[5];
			my $DIALPLAN_MATCH_LEN = $cmd[6];
			my $DIALPLAN_SUBST_EXP = $cmd[7];
			my $DIALPLAN_REPL_EXP = $cmd[8];
			my $DIALPLAN_ATTRS = $cmd[9];

			$sth=$dbh->prepare( " INSERT INTO $DIALPLAN_TABLE 
					     ( $dialplan_table{'DIALPLAN_DPID_COLUMN'}, $dialplan_table{'DIALPLAN_PR_COLUMN'}, 
					     $dialplan_table{'DIALPLAN_MATCH_OP_COLUMN'}, $dialplan_table{'DIALPLAN_MATCH_EXP_COLUMN'}, 
				 	     $dialplan_table{'DIALPLAN_MATCH_LEN_COLUMN'},	$dialplan_table{'DIALPLAN_SUBST_EXP_COLUMN'}, 
		                  	     $dialplan_table{'DIALPLAN_REPL_EXP_COLUMN'}, $dialplan_table{'DIALPLAN_ATTRS_COLUMN'} ) 
					     VALUES ( $DIALPLAN_DPID, $DIALPLAN_PR, $DIALPLAN_MATCH_OP, 
					     \'$DIALPLAN_MATCH_EXP\', $DIALPLAN_MATCH_LEN, \'$DIALPLAN_SUBST_EXP\', 
					     \'$DIALPLAN_REPL_EXP\', \'$DIALPLAN_ATTRS\') " );
			

			#execute the query
			$sth->execute();
			warn "Entry could not be inserted into table", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();


			$var = &fifo_cmd('dp_reload');
			print $var;
	


		}

		case (/^rm$/) {
			print "rm";

			$sth = $dbh->prepare(" DELETE FROM $DIALPLAN_TABLE ");

			#execute the query
			$sth->execute( );
			warn "Deleting entry failed!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();

			$var = &fifo_cmd('dp_reload');
			print $var;
		}

		case (/^rmpid$/) {

			if ( $#cmd lt 2 ) {
				print "Too few parameters\n";
				&usage_dialplan();
				return;
			}


			$sth = $dbh->prepare( " DELETE FROM $DIALPLAN_TABLE WHERE $dialplan_table{'DIALPLAN_DPID_COLUMN'}=$cmd[2]" );

			#execute the query
			$sth->execute();
			warn "Deleting entry failed!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();


			$var = &fifo_cmd('dp_reload');
			print $var;

		}

		case (/^rmrule$/) {

			if ( $#cmd lt 3 ) {
				print "Too few parameters\n";
				&usage_dialplan();
				return;
			}

			my $DIALPLAN_DPID = $cmd[2];
			my $DIALPLAN_PR = $cmd[3];

			$sth = $dbh->prepare ( "DELETE FROM $DIALPLAN_TABLE 
						WHERE $dialplan_table{'DIALPLAN_DPID_COLUMN'}=$DIALPLAN_DPID 
						AND $dialplan_table{'DIALPLAN_PR_COLUMN'}=$DIALPLAN_PR " );
			#execute query
			$sth->execute();
			warn "Deleting entry failed!", $sth->errstr( ), "\n" if $sth->err( );
			$sth->finish();


			$var = &fifo_cmd('dp_reload');
			print $var;

		}

		case (/^h$/) {
			
			&usage_dialplan();
		
		}

		else {
			print "dialplan -unknown command $cmd[1]\n";
		}
	}
}

